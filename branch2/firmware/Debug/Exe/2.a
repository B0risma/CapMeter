;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 09.06.2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega168
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#define CUR2 PORTD.7
;#define CUR1 PORTB.0
;#define DISCH PORTB.1
;#define LCD_LINE1 lcd_com(0x80)
;#define LCD_LINE2 lcd_com(0xC0)
;#define LCD_CLR lcd_com(0x01)
;#define U1 1250
;#define U2 1300
;
;#include <mega168.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;
;
;// Standard Input/Output functions
;//#include <stdio.h>
;#include <stdlib.h>
;//#include <string.h>
;#include <iobits.h>
;#include <delay.h>
;#include <spi.h>
;
;// Declare your global variables here
;unsigned int t=0, T1=0, T2=0;
;eeprom float I1=10.5, I2= 113.3;
;
;void LCDcom(unsigned char com) //выполняет пол команды отправляет старший полубайт
; 0000 0031 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0032     com |= 0x08;                // Р3 в единицу, дабы горела подсветка
;PCODE: $0000000E VOL: 0
;	com -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0033     spi(com);    // Вывод данных
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0034     SETBIT(PORTB,2);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035     //delay_us(1);
; 0000 0036     CLRBIT(PORTB,2);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0037     //delay_us(200);
; 0000 0038     com |= 0x04;                // Е в единицу
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0039     spi(com);    // Вывод данных
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003A     SETBIT(PORTB,2);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003B     //delay_us(1);
; 0000 003C     CLRBIT(PORTB,2);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D     //delay_us(200);
; 0000 003E     com &= 0xFB;                // Е в ноль
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003F     spi(com);    // Вывод данных
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0040     SETBIT(PORTB,2);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0041     //delay_us(1);
; 0000 0042     CLRBIT(PORTB,2);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0043     delay_ms(2);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0044 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;void lcd_com(unsigned char com)
; 0000 0047     {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0048       LCDcom(com & 0xF0);
;PCODE: $00000032 VOL: 0
;	com -> Y+0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0049       LCDcom((com <<4)&0xF0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004A     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;void LCDinit()
; 0000 004D {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004E     delay_ms(40);        // Пауза после подачи питания
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004F     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0050     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000046 VOL: 0
; 0000 0051     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0052     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000049 VOL: 0
; 0000 0053     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0054     delay_us(40);        // Задержка для выполнения команды
;PCODE: $0000004C VOL: 0
; 0000 0055     LCDcom(0x20);        // Переход в 4-х битный режим
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0056     delay_us(40);        // Задержка для выполнения команды
;PCODE: $0000004F VOL: 0
; 0000 0057     LCDcom(0x20);        // Установка параметров
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0058     LCDcom(0x80);        // Установка параметров
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0059     LCDcom(0x00);        // Выключаем дисплей
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005A     LCDcom(0x80);        // Выключаем дисплей
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005B     LCDcom(0x00);        // Очищаем дисплей
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 005C     LCDcom(0x10);        // Очищаем дисплей
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005D     LCDcom(0x00);        // Устанавливаем режим ввода данных
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005E     LCDcom(0x60);        // Устанавливаем режим ввода данных
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005F     LCDcom(0x00);        // Включаем дисплей с выбранным курсором
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0060     LCDcom(0xC0);        // Включаем дисплей с выбранным курсором
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0061 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;void char_out(unsigned char data)
; 0000 0064 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0065     unsigned char data_h = ((data & 0xF0) + 0x09);
; 0000 0066     unsigned char data_l = ((data << 4) + 0x09);
; 0000 0067 
; 0000 0068     spi(data_h); // Передача старших 4 бит
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	data -> Y+2
;	data_h -> R17
;	data_l -> R16
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0069     SETBIT(PORTB,2);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006A     //delay_us(1);
; 0000 006B     CLRBIT(PORTB,2);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006C     //delay_us(200);
; 0000 006D     data_h |= 0x04;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006E     spi(data_h); // Передача старших 4 бит
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006F     SETBIT(PORTB,2);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0070     //delay_us(1);
; 0000 0071     CLRBIT(PORTB,2);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0072     //delay_us(200);
; 0000 0073     data_h &= 0xF9;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0074     spi(data_h); // Передача старших 4 бит
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0075     SETBIT(PORTB,2);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0076     //delay_us(1);
; 0000 0077     CLRBIT(PORTB,2);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0078     //delay_us(500);
; 0000 0079     spi(data_l); // Передача младших 4 бит
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007A     SETBIT(PORTB,2);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 007B     //delay_us(1);
; 0000 007C     CLRBIT(PORTB,2);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007D     //delay_us(200);
; 0000 007E     data_l |= 0x04;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007F     spi(data_l); // Передача младших 4 бит
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080     SETBIT(PORTB,2);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0081     //delay_us(1);
; 0000 0082     CLRBIT(PORTB,2);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0083     //delay_us(200);
; 0000 0084     data_l &= 0xF9;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0085     spi(data_l); // Передача младших 4 бит
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0086     SETBIT(PORTB,2);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0087     //delay_us(1);
; 0000 0088     CLRBIT(PORTB,2);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0089     delay_ms(2);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 008A }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;
;void str_out(char *str)
; 0000 008D     {
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 008E         while (*str!='\0')
;PCODE: $000000AB VOL: 0
;	*str -> Y+0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008F             {
; 0000 0090               char_out(*str++);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0091             }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0092     }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;
;void strf_out(flash char *str)
; 0000 0095     {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0096         while (*str!='\0')
;PCODE: $000000BD VOL: 0
;	*str -> Y+0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0097             {
; 0000 0098               char_out(*str++);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0099             }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 009A     }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;
;void lcd_printf(float f, unsigned char n){
; 0000 009C void lcd_printf(float f, unsigned char n){
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009D     char *str = "";
; 0000 009E     ftoa(f, n, str);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;	f -> Y+3
;	n -> Y+2
;	*str -> R16,R17
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009F     str_out(str);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A0 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0

	.DSEG
_0x9:
	.BYTE 0x1
;
;void check( float C){
; 0000 00A2 void check( float C){

	.CSEG
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A3  LCD_CLR;
;PCODE: $000000E7 VOL: 0
;	C -> Y+0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00A4  LCD_LINE1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00A5  strf_out("CHECK");
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A6 
; 0000 00A7 
; 0000 00A8 
; 0000 00A9  DISCH=1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00AA  delay_ms(1000);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00AB  CUR2=1;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00AC  DISCH=0;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00AD  TCNT0=0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00AE  CLRBIT(ADMUX,MUX0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00AF  SETBIT(ACSR,ACI);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B0  T1=T2=0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00B1  t=0;
;PCODE: $00000102 VOL: 0
; 0000 00B2  while(!T2);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00B3  CUR2=0;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00B4  I2 = (U2/(float)T2)*C;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B5 
; 0000 00B6  DISCH=1;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B7  delay_ms(1000);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B8  CUR1=1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B9  DISCH=0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00BA  TCNT0=0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00BB  CLRBIT(ADMUX,MUX0);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00BC  SETBIT(ACSR,ACI);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00BD  T1=T2=0;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00BE  t=0;
;PCODE: $00000125 VOL: 0
; 0000 00BF  while(!T2);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C0  CUR1=0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00C1  I1 = (U2/(float)T2)*C;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00C2 
; 0000 00C3  DISCH=1;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C4  LCD_CLR;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C5  LCD_LINE1;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00C6  lcd_printf(I1,1 );
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00C7  strf_out("mA");
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00C8  LCD_LINE2;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00C9  lcd_printf(I2,1);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00CA  strf_out("mA");
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00CB 
; 0000 00CC 
; 0000 00CD }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;float testC2(){
; 0000 00CF float testC2(){
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00D0     float C=0;
; 0000 00D1     DISCH=1;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;	C -> Y+0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00D2     delay_ms(1000);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00D3     CUR2=1;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00D4     DISCH=0;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00D5     CLRBIT(ADMUX,MUX0);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00D6      SETBIT(ACSR,ACI);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00D7      TCNT0=0;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00D8      T1=T2=0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00D9      t=0;
;PCODE: $0000016E VOL: 0
; 0000 00DA      while(!T2);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00DB      CUR2=0;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00DC      if (T1/T2 >5){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00DD         C = testC2();
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00DE      }
; 0000 00DF      else{
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E0         C=I1*T2/U2;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00E1      }
;PCODE: $00000189 VOL: 0
; 0000 00E2      LCD_CLR;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00E3      lcd_printf(C,0);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00E4      strf_out("uF");
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00E5      return C;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00E6 }
;PCODE: $00000196 VOL: 0
;
;
;float testC1(){
; 0000 00E9 float testC1(){
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00EA     float C=0;
; 0000 00EB     DISCH=1;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;	C -> Y+0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00EC     delay_ms(1000);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00ED     CUR1=1;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00EE 
; 0000 00EF     DISCH=0;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00F0     CLRBIT(ADMUX,MUX0);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00F1     SETBIT(ACSR,ACI);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00F2      TCNT0=0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00F3      T1=T2=0;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00F4      t=0;
;PCODE: $000001B5 VOL: 0
; 0000 00F5      while(!T2){
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00F6         if (t>100){ //200uF
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00F7             CUR1=0;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00F8             return testC2();
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00F9 
; 0000 00FA         }
; 0000 00FB      }
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00FC      CUR1=0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00FD      if (T1/T2 >5){
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00FE         C = testC1();
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00FF      }
; 0000 0100      else{
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0101         C=I1*T2/U2;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0102      }
;PCODE: $000001D9 VOL: 0
; 0000 0103 
; 0000 0104      LCD_CLR;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0105      lcd_printf(C,2);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0106      strf_out("uF");
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0107      return C;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0108 
; 0000 0109 
; 0000 010A }
;PCODE: $000001E6 VOL: 0
;
;
;void testR(float C){
; 0000 010D void testR(float C){
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 010E     float R=0;
; 0000 010F     LCD_LINE2;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;	C -> Y+4
;	R -> Y+0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0110     DISCH=1;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0111     delay_ms(1000);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0112     CUR2=1;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0113     DISCH=0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0114     CLRBIT(ADMUX,MUX0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0115     SETBIT(ACSR,ACI);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0116     TCNT0=0;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0117     T1=T2=0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0118     t=0;
;PCODE: $00000208 VOL: 0
; 0000 0119     while(!T2){}
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 011A     CUR2=0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 011B     LCD_LINE2;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 011C     R=U1/I2 - (float)T1/C;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 011D     lcd_printf(R,3);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 011E     strf_out("Om");
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 011F 
; 0000 0120 }
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0124 {
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0125     delay_ms(100);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0126     SETBIT(ACSR,ACI);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0127    #asm("sei")
;PCODE: $00000232 VOL: 0
	sei
;PCODE: $00000233 VOL: 0
; 0000 0128    check(6.89);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0129 }
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 012D {
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 012E         t++;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 012F 
; 0000 0130 }
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 0134 {
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0135         if (TSTBIT(ADMUX,MUX0)==0){
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0136             SETBIT(ADMUX,MUX0);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0137             T1 = t*256 + TCNT0;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0138             T2=0;
;PCODE: $0000024F VOL: 0
; 0000 0139 
; 0000 013A 
; 0000 013B         }
; 0000 013C         else{
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 013D             if(TSTBIT(ADMUX,MUX0)==1){
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 013E                 //if (T1/(t*256+TCNT0)>2){
; 0000 013F                   //  SETBIT(ADMUX,MUX0);
; 0000 0140                     //}
; 0000 0141                 //else{
; 0000 0142                     T2 = t*256 + TCNT0;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0143                 //}
; 0000 0144             }
; 0000 0145         }
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0146          TCNT0=0;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0147          t=0;
;PCODE: $00000262 VOL: 0
; 0000 0148          SETBIT(ACSR,ACI);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0149 }
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;
;
;
;void main(void)
; 0000 014E {
;PCODE: $00000269 VOL: 0
; 0000 014F // Declare your local variables here
; 0000 0150 
; 0000 0151 // Crystal Oscillator division factor: 1
; 0000 0152 #pragma optsize-
; 0000 0153 CLKPR=(1<<CLKPCE);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0154 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0155 #ifdef _OPTIMIZE_SIZE_
; 0000 0156 #pragma optsize+
; 0000 0157 #endif
; 0000 0158 
; 0000 0159 // Input/Output Ports initialization
; 0000 015A // Port B initialization
; 0000 015B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 015C DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 015D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 015E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 015F 
; 0000 0160 // Port C initialization
; 0000 0161 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0162 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0163 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0164 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0165 
; 0000 0166 // Port D initialization
; 0000 0167 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0168 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0169 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 016A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 016B 
; 0000 016C // Timer/Counter 0 initialization
; 0000 016D // Clock source: System Clock
; 0000 016E // Clock value: 1000,000 kHz
; 0000 016F // Mode: Normal top=0xFF
; 0000 0170 // OC0A output: Disconnected
; 0000 0171 // OC0B output: Disconnected
; 0000 0172 // Timer Period: 0,256 ms
; 0000 0173 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0174 TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0175 TCNT0=0x00;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0176 OCR0A=0x00;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0177 OCR0B=0x00;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0178 
; 0000 0179 // Timer/Counter 1 initialization
; 0000 017A // Clock source: System Clock
; 0000 017B // Clock value: Timer1 Stopped
; 0000 017C // Mode: Normal top=0xFFFF
; 0000 017D // OC1A output: Disconnected
; 0000 017E // OC1B output: Disconnected
; 0000 017F // Noise Canceler: Off
; 0000 0180 // Input Capture on Falling Edge
; 0000 0181 // Timer1 Overflow Interrupt: Off
; 0000 0182 // Input Capture Interrupt: Off
; 0000 0183 // Compare A Match Interrupt: Off
; 0000 0184 // Compare B Match Interrupt: Off
; 0000 0185 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0186 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0187 TCNT1H=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0188 TCNT1L=0x00;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0189 ICR1H=0x00;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 018A ICR1L=0x00;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 018B OCR1AH=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 018C OCR1AL=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 018D OCR1BH=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 018E OCR1BL=0x00;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 018F 
; 0000 0190 // Timer/Counter 2 initialization
; 0000 0191 // Clock source: System Clock
; 0000 0192 // Clock value: Timer2 Stopped
; 0000 0193 // Mode: Normal top=0xFF
; 0000 0194 // OC2A output: Disconnected
; 0000 0195 // OC2B output: Disconnected
; 0000 0196 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 0197 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0198 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0199 TCNT2=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 019A OCR2A=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 019B OCR2B=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 019C 
; 0000 019D // Timer/Counter 0 Interrupt(s) initialization
; 0000 019E TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 019F 
; 0000 01A0 // Timer/Counter 1 Interrupt(s) initialization
; 0000 01A1 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01A2 
; 0000 01A3 // Timer/Counter 2 Interrupt(s) initialization
; 0000 01A4 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01A5 
; 0000 01A6 // External Interrupt(s) initialization
; 0000 01A7 // INT0: On
; 0000 01A8 // INT0 Mode: Any change
; 0000 01A9 // INT1: Off
; 0000 01AA // Interrupt on any change on pins PCINT0-7: Off
; 0000 01AB // Interrupt on any change on pins PCINT8-14: Off
; 0000 01AC // Interrupt on any change on pins PCINT16-23: Off
; 0000 01AD EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 01AE EIMSK=(0<<INT1) | (1<<INT0);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01AF EIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01B0 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01B1 
; 0000 01B2 // USART initialization
; 0000 01B3 // USART disabled
; 0000 01B4 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01B5 
; 0000 01B6 // Analog Comparator initialization
; 0000 01B7 // Analog Comparator: On
; 0000 01B8 // The Analog Comparator's positive input is
; 0000 01B9 // connected to the AIN0 pin
; 0000 01BA // The Analog Comparator's negative input is
; 0000 01BB // connected to the ADC multiplexer
; 0000 01BC // Interrupt on Rising Output Edge
; 0000 01BD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01BE ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (1<<ACI) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01BF ADCSRB=(1<<ACME);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01C0 // Digital input buffer on AIN0: On
; 0000 01C1 // Digital input buffer on AIN1: On
; 0000 01C2 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01C3 
; 0000 01C4 // ADC initialization
; 0000 01C5 // ADC disabled
; 0000 01C6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01C7 
; 0000 01C8 // SPI initialization
; 0000 01C9 // SPI Type: Master
; 0000 01CA // SPI Clock Rate: 500,000 kHz
; 0000 01CB // SPI Clock Phase: Cycle Start
; 0000 01CC // SPI Clock Polarity: Low
; 0000 01CD // SPI Data Order: MSB First
; 0000 01CE SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (1<<SPR0);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01CF SPSR=(0<<SPI2X);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01D0 
; 0000 01D1 // TWI initialization
; 0000 01D2 // TWI disabled
; 0000 01D3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01D4 
; 0000 01D5 DISCH=1;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 01D6 SETBIT(ACSR,ACI);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01D7 #asm("sei")
;PCODE: $000002C7 VOL: 0
	sei
;PCODE: $000002C8 VOL: 0
; 0000 01D8 LCDinit();
;PCODE: $000002C9 VOL: 0
; 0000 01D9 delay_ms(100);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01DA lcd_printf(I1, 1);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01DB strf_out("mA");
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01DC LCD_LINE2;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01DD lcd_printf(I2,1);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01DE strf_out("mA");
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01DF delay_ms(100);
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01E0 testR(testC1());
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01E1 
; 0000 01E2 while (1)
;PCODE: $000002E5 VOL: 0
; 0000 01E3       {
; 0000 01E4       // Place your code here
; 0000 01E5 
; 0000 01E6       }
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01E7 }
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
