;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15.05.2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;#define CUR2 PORTD.7
;#define CUR1 PORTB.0
;#define DISCH PORTB.1
;#define LCD_LINE1 lcd_com(0x80)
;#define LCD_LINE2 lcd_com(0xC0)
;#define LCD_CLR lcd_com(0x01)
;#define CLK 16  //MHz
;#define CLK_PSL 8
;#define REF 1.25
;
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Standard Input/Output functions
;//#include <stdio.h>
;#include <stdlib.h>
;//#include <string.h>
;#include <iobits.h>
;#include <delay.h>
;#include <spi.h>
;
;// Declare your global variables here
;unsigned long t=0, T1=0, T2=0;
;eeprom float I1=10.5, I2= 113.3;
;bit mode = 0;
;
;void LCDcom(unsigned char com) //выполняет пол команды отправляет старший полубайт
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033     com |= 0x08;                // Р3 в единицу, дабы горела подсветка
;PCODE: $0000000F VOL: 0
;	com -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0034     spi(com);    // Вывод данных
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0035     SETBIT(PORTB,2);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0036     //delay_us(1);
; 0000 0037     CLRBIT(PORTB,2);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0038     //delay_us(200);
; 0000 0039     com |= 0x04;                // Е в единицу
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003A     spi(com);    // Вывод данных
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003B     SETBIT(PORTB,2);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003C     //delay_us(1);
; 0000 003D     CLRBIT(PORTB,2);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003E     //delay_us(200);
; 0000 003F     com &= 0xFB;                // Е в ноль
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0040     spi(com);    // Вывод данных
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0041     SETBIT(PORTB,2);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0042     //delay_us(1);
; 0000 0043     CLRBIT(PORTB,2);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0044     delay_ms(2);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0045 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void lcd_com(unsigned char com)
; 0000 0048     {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0049       LCDcom(com & 0xF0);
;PCODE: $00000033 VOL: 0
;	com -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004A       LCDcom((com <<4)&0xF0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004B     }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;void LCDinit()
; 0000 004E {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004F     delay_ms(40);        // Пауза после подачи питания
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0050     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000047 VOL: 0
; 0000 0052     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0053     delay_us(40);        // Задержка для выполнения команды
;PCODE: $0000004A VOL: 0
; 0000 0054     LCDcom(0x30);        // Переход в 4-х битный режим
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0055     delay_us(40);        // Задержка для выполнения команды
;PCODE: $0000004D VOL: 0
; 0000 0056     LCDcom(0x20);        // Переход в 4-х битный режим
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0057     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000050 VOL: 0
; 0000 0058     LCDcom(0x20);        // Установка параметров
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0059     LCDcom(0x80);        // Установка параметров
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005A     LCDcom(0x00);        // Выключаем дисплей
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005B     LCDcom(0x80);        // Выключаем дисплей
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005C     LCDcom(0x00);        // Очищаем дисплей
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005D     LCDcom(0x10);        // Очищаем дисплей
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005E     LCDcom(0x00);        // Устанавливаем режим ввода данных
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005F     LCDcom(0x60);        // Устанавливаем режим ввода данных
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0060     LCDcom(0x00);        // Включаем дисплей с выбранным курсором
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0061     LCDcom(0xC0);        // Включаем дисплей с выбранным курсором
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0062 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;void char_out(unsigned char data)
; 0000 0065 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0066     unsigned char data_h = ((data & 0xF0) + 0x09);
; 0000 0067     unsigned char data_l = ((data << 4) + 0x09);
; 0000 0068 
; 0000 0069 	spi(data_h); // Передача старших 4 бит
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	data -> Y+2
;	data_h -> R17
;	data_l -> R16
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006A     SETBIT(PORTB,2);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006B     //delay_us(1);
; 0000 006C     CLRBIT(PORTB,2);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006D     //delay_us(200);
; 0000 006E 	data_h |= 0x04;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006F     spi(data_h); // Передача старших 4 бит
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0070     SETBIT(PORTB,2);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0071     //delay_us(1);
; 0000 0072     CLRBIT(PORTB,2);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0073     delay_us(200);
;PCODE: $00000081 VOL: 0
; 0000 0074 	data_h &= 0xF9;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0075 	spi(data_h); // Передача старших 4 бит
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0076     SETBIT(PORTB,2);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0077     //delay_us(1);
; 0000 0078     CLRBIT(PORTB,2);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0079 	delay_us(500);
;PCODE: $0000008A VOL: 0
; 0000 007A 	spi(data_l); // Передача младших 4 бит
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 007B     SETBIT(PORTB,2);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007C     //delay_us(1);
; 0000 007D     CLRBIT(PORTB,2);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007E     //delay_us(200);
; 0000 007F 	data_l |= 0x04;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080 	spi(data_l); // Передача младших 4 бит
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0081     SETBIT(PORTB,2);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0082     //delay_us(1);
; 0000 0083     CLRBIT(PORTB,2);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0084     //delay_us(200);
; 0000 0085 	data_l &= 0xF9;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0086 	spi(data_l); // Передача младших 4 бит
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0087     SETBIT(PORTB,2);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0088     //delay_us(1);
; 0000 0089     CLRBIT(PORTB,2);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 008A     delay_ms(2);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008B }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;
;void str_out(char *str)
; 0000 008E     {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008F         while (*str!='\0')
;PCODE: $000000AA VOL: 0
;	*str -> Y+0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0090             {
; 0000 0091               char_out(*str++);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0092             }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0093     }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;
;void strf_out(flash char *str)
; 0000 0096     {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0097         while (*str!='\0')
;PCODE: $000000BC VOL: 0
;	*str -> Y+0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0098             {
; 0000 0099               char_out(*str++);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009A             }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009B     }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;void lcd_printf(float f, unsigned char n){
; 0000 009D void lcd_printf(float f, unsigned char n){
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 009E     char *str = "";
; 0000 009F     ftoa(f, n, str);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;	f -> Y+3
;	n -> Y+2
;	*str -> R16,R17
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A0     str_out(str);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A1 }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0

	.DSEG
_0x9:
	.BYTE 0x1
;
;void check( float C){
; 0000 00A3 void check( float C){

	.CSEG
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A4  CUR1 = 0;
;PCODE: $000000E2 VOL: 0
;	C -> Y+0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A5  CUR2 = 0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A6  mode = 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00A7  LCD_CLR;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00A8  LCD_LINE1;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A9  strf_out("CHECK");
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00AA  SETBIT(SFIOR, ACME);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00AB  SETBIT(TCCR1B,CS11);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00AC  #asm("sei")
;PCODE: $000000F7 VOL: 0
	sei
;PCODE: $000000F8 VOL: 0
; 0000 00AD  SETBIT(PORTD, PORTD0);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AE  DISCH=1;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00AF  delay_ms(1000);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B0  CUR2=1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00B1  DISCH=0;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B2  TCNT1=0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B3  CLRBIT(TIMSK, TICIE1);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00B4  ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B5  SETBIT(TIFR,ICF1);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00B6  SETBIT(TIMSK, TICIE1);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00B7  T1=0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00B8  T2=0;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00B9  t=0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00BA  while(!T2);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BB  CUR2=0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00BC  I2 = (1265)/((float)T2/(CLK/CLK_PSL))*C;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00BD 
; 0000 00BE 
; 0000 00BF 
; 0000 00C0 
; 0000 00C1  DISCH=1;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C2  delay_ms(1000);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C3  CUR1=1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00C4  DISCH=0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00C5  TCNT1=0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00C6  CLRBIT(TIMSK, TICIE1);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C7  ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00C8  SETBIT(TIFR,ICF1);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00C9  SETBIT(TIMSK, TICIE1);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00CA  T1=0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00CB  T2=0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00CC  t=0;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00CD  while(!T2);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00CE  CUR1=0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00CF  I1 = (1265)/((float)T2/(CLK/CLK_PSL))*C;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D0 
; 0000 00D1 
; 0000 00D2  DISCH=1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00D3  LCD_CLR;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00D4  LCD_LINE1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00D5  lcd_printf(I1,1 );
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00D6  strf_out("mA");
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00D7  LCD_LINE2;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00D8  lcd_printf(I2,1);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00D9  strf_out("mA");
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00DA  CLRBIT(PORTD, PORTD0);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00DB 
; 0000 00DC  mode = 0;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00DD  CLRBIT(TCCR1B,CS11);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;
;float testC(){
; 0000 00E2 float testC(){
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00E3 float C = 0;
; 0000 00E4 #asm("cli")
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;	C -> Y+0
;PCODE: $00000187 VOL: 0
	cli
;PCODE: $00000188 VOL: 0
; 0000 00E5 CUR1 = 0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00E6 CUR2 = 0;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00E7 DISCH=1;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00E8 delay_ms(1000);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00E9 SETBIT(TCCR1B,CS11);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00EA CLRBIT(ADMUX,MUX0);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00EB SETBIT(TIFR,ICF1);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00EC #asm("sei")
;PCODE: $00000199 VOL: 0
	sei
;PCODE: $0000019A VOL: 0
; 0000 00ED CUR1=1;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00EE t = 0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00EF TCNT1 = 0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00F0 T1 = 0;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00F1 T2 = 0;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00F2 DISCH = 0;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00F3 while (!T1);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00F4 if (t > 4) {  //~>1000uF
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00F5     #asm("cli")
;PCODE: $000001B0 VOL: 0
	cli
;PCODE: $000001B1 VOL: 0
; 0000 00F6     CUR1 = 0;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00F7     DISCH = 1;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00F8     delay_ms(500);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00F9     CLRBIT(ADMUX,MUX0);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00FA     SETBIT(TIFR,ICF1);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00FB     #asm("sei")
;PCODE: $000001BD VOL: 0
	sei
;PCODE: $000001BE VOL: 0
; 0000 00FC     CUR2 = 1;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00FD     t = 0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00FE     TCNT1 = 0;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00FF     T1 = 0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0100     T2 = 0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0101     DISCH = 0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0102     while (!T1);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0103     while ((T2<T1/2) | (!T2));
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0104     CUR2 = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0105     C =  (I2*((float)T2/(CLK/CLK_PSL)))/(1265);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0106 }
; 0000 0107 else {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0108     while ((T2<T1/2) | (!T2));
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0109     CUR1 = 0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 010A     C =  (I1*((float)T2/(CLK/CLK_PSL)))/(1265);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 010B }
;PCODE: $0000020B VOL: 0
; 0000 010C return C;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 010D }
;PCODE: $0000020F VOL: 0
;
;
;float esr(float C){
; 0000 0110 float esr(float C){
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0111     float R = 0;
; 0000 0112     #asm("cli")
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;	C -> Y+4
;	R -> Y+0
;PCODE: $0000021C VOL: 0
	cli
;PCODE: $0000021D VOL: 0
; 0000 0113     CUR1 = 0;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0114     CUR2 = 0;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0115     DISCH = 1;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0116     delay_ms(2000);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0117     SETBIT(TCCR1B,CS11);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0118     //CLRBIT(ADMUX,MUX0);
; 0000 0119     ADMUX |= (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (0 << MUX0);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 011A     SETBIT(TIFR,ICF1);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 011B     #asm("sei")
;PCODE: $0000022E VOL: 0
	sei
;PCODE: $0000022F VOL: 0
; 0000 011C     DISCH = 0;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 011D     CUR2 = 1;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 011E     TCNT1 = 0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 011F                 //пока оставить такой порядок, наиболее точно и быстро
; 0000 0120     t = 0;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0121     T1 = 0;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0122     while(!T1);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0123     R = (1235)/I2 - ((float)T1/(CLK/CLK_PSL))/C;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0124     CUR1 = 0;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0125     CUR2 = 0;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0126     DISCH = 1;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0127     return R;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0128 }
;PCODE: $0000025A VOL: 0
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 012D {
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 012E     delay_ms(100);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 012F     SETBIT(TIFR,ICF1);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0130     #asm("sei")
;PCODE: $00000263 VOL: 0
	sei
;PCODE: $00000264 VOL: 0
; 0000 0131     check(6.89);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0132 }
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0138 {
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0139         t++;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 013A         if((t > (CLK/CLK_PSL)*30) & (!mode)){
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 013B             LCD_CLR;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 013C             strf_out("ERROR");
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 013D         }
; 0000 013E 
; 0000 013F }
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;
;
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0143 {
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0144         if (TSTBIT(ADMUX, MUX1)) {
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0145             TCNT1 = 0;                                //мултиплексор на 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0146             //PORTD.0 = 1;
; 0000 0147             ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0148             }
; 0000 0149         else if (TSTBIT(ADMUX, MUX0)==0){
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 014A             TCNT1=0;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 014B             //PORTD.1 = 1;
; 0000 014C             SETBIT(ADMUX, MUX0);
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 014D             T1 = t*0xFFFF + ICR1;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 014E             T2=0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 014F             t=0;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0150 
; 0000 0151 
; 0000 0152         }
; 0000 0153         else{
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0154             //PORTD.3 = 1;
; 0000 0155             T2 = t*0xFFFF + ICR1;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0156         }
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0157          SETBIT(TIFR,ICF1);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0158 }
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;
;
;
;void main(void)
; 0000 015D {
;PCODE: $000002B2 VOL: 0
; 0000 015E // Declare your local variables here
; 0000 015F float C = 0, R=0;
; 0000 0160 
; 0000 0161 
; 0000 0162 // Input/Output Ports initialization
; 0000 0163 // Port B initialization
; 0000 0164 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0165 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;	C -> Y+4
;	R -> Y+0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0166 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0167 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0168 
; 0000 0169 // Port C initialization
; 0000 016A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 016B DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 016C // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 016D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 016E 
; 0000 016F // Port D initialization
; 0000 0170 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0171 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0172 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0173 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0174 
; 0000 0175 // Timer/Counter 0 initialization
; 0000 0176 // Clock source: System Clock
; 0000 0177 // Clock value: 1000,000 kHz
; 0000 0178 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0179 TCNT0=0x00;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 017A 
; 0000 017B // Timer/Counter 1 initialization
; 0000 017C // Clock source: System Clock
; 0000 017D // Clock value: 1000,000 kHz
; 0000 017E // Mode: Normal top=0xFFFF
; 0000 017F // OC1A output: Disconnected
; 0000 0180 // OC1B output: Disconnected
; 0000 0181 // Noise Canceler: Off
; 0000 0182 // Input Capture on Rising Edge
; 0000 0183 // Timer Period: 65,536 ms
; 0000 0184 // Timer1 Overflow Interrupt: On
; 0000 0185 // Input Capture Interrupt: On
; 0000 0186 // Compare A Match Interrupt: Off
; 0000 0187 // Compare B Match Interrupt: Off
; 0000 0188 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0189 TCCR1B=(0<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 018A TCNT1H=0x00;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 018B TCNT1L=0x00;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 018C ICR1H=0x00;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 018D ICR1L=0x00;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 018E OCR1AH=0x00;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 018F OCR1AL=0x00;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0190 OCR1BH=0x00;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0191 OCR1BL=0x00;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0192 
; 0000 0193 // Timer/Counter 2 initialization
; 0000 0194 // Clock source: System Clock
; 0000 0195 // Clock value: Timer2 Stopped
; 0000 0196 // Mode: Normal top=0xFF
; 0000 0197 // OC2 output: Disconnected
; 0000 0198 ASSR=0<<AS2;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0199 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 019A TCNT2=0x00;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 019B OCR2=0x00;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 019C 
; 0000 019D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 019E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 019F 
; 0000 01A0 // External Interrupt(s) initialization
; 0000 01A1 // INT0: On
; 0000 01A2 // INT0 Mode: Any change
; 0000 01A3 // INT1: Off
; 0000 01A4 GICR|=(0<<INT1) | (1<<INT0);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01A5 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01A6 GIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01A7 
; 0000 01A8 // USART initialization
; 0000 01A9 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01AA // USART Receiver: Off
; 0000 01AB // USART Transmitter: On
; 0000 01AC // USART Mode: Asynchronous
; 0000 01AD // USART Baud Rate: 9600
; 0000 01AE UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01AF UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01B0 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 01B1 UBRRH=0x00;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01B2 UBRRL=0x33;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01B3 
; 0000 01B4 // Analog Comparator initialization
; 0000 01B5 // Analog Comparator: On
; 0000 01B6 // The Analog Comparator's positive input is
; 0000 01B7 // connected to the AIN0 pin
; 0000 01B8 // The Analog Comparator's negative input is
; 0000 01B9 // connected to the ADC multiplexer
; 0000 01BA // Interrupt on Rising Output Edge
; 0000 01BB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01BC ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (1<<ACI) | (0<<ACIE) | (1<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01BD SFIOR=(1<<ACME);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01BE 
; 0000 01BF // ADC initialization
; 0000 01C0 // ADC disabled
; 0000 01C1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01C2 ADMUX = 0;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 01C3 
; 0000 01C4 // SPI initialization
; 0000 01C5 // SPI Type: Master
; 0000 01C6 // SPI Clock Rate: 500,000 kHz
; 0000 01C7 // SPI Clock Phase: Cycle Start
; 0000 01C8 // SPI Clock Polarity: Low
; 0000 01C9 // SPI Data Order: MSB First
; 0000 01CA if (CLK <= 16) SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (1<<SPR0);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01CB else   SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 01CC SPSR=(0<<SPI2X);
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01CD 
; 0000 01CE // TWI initialization
; 0000 01CF // TWI disabled
; 0000 01D0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 01D1 
; 0000 01D2 // Global enable interrupts
; 0000 01D3 DISCH=1;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01D4 SETBIT(TIFR,ICF1);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 01D5 #asm("cli")
;PCODE: $0000031A VOL: 0
	cli
;PCODE: $0000031B VOL: 0
; 0000 01D6 LCDinit();
;PCODE: $0000031C VOL: 0
; 0000 01D7 delay_ms(100);
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01D8 lcd_printf(I1, 1);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01D9 strf_out("mA");
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 01DA LCD_LINE2;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01DB lcd_printf(I2,1);
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01DC strf_out("mA");
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01DD delay_ms(500);
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 01DE 
; 0000 01DF LCD_CLR;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 01E0 strf_out("TESTING");
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 01E1 
; 0000 01E2 C = testC();
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01E3 R = esr(C);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01E4 CLRBIT(TCCR1B,CS11);
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01E5 
; 0000 01E6 
; 0000 01E7 
; 0000 01E8 while (1)
;PCODE: $00000341 VOL: 0
; 0000 01E9       {
; 0000 01EA         LCD_CLR;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01EB         if ( C > 1000){
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01EC             lcd_printf( C, 0);
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01ED         }
; 0000 01EE         else{
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01EF             lcd_printf(C, 2);
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01F0         }
;PCODE: $00000352 VOL: 0
; 0000 01F1         LCD_LINE2;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01F2         strf_out("    uf");
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01F3         delay_ms(1000);
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01F4         LCD_CLR;
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 01F5         lcd_printf(R, 3); //!!!!!!!!!!!!!
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 01F6         LCD_LINE2;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 01F7         strf_out("    ohm");
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01F8         delay_ms(1000);
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 01F9       }
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 01FA }
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
