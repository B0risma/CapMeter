
AVRASM ver. 2.1.30  D:\YandexDisk\Практика\итог\Debug\List\Cmeter.asm Tue Sep 21 15:30:29 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c037      	RJMP __RESET
000001 c1a7      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c1d5      	RJMP _timer1_capt_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c1ab      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 _0x0:
000014 4300
000015 4548
000016 4b43
000017 6d00      	.DB  0x0,0x43,0x48,0x45,0x43,0x4B,0x0,0x6D
000018 0041
000019 5245
00001a 4f52
00001b 0052      	.DB  0x41,0x0,0x45,0x52,0x52,0x4F,0x52,0x0
00001c 4554
00001d 5453
00001e 4e49
00001f 0047      	.DB  0x54,0x45,0x53,0x54,0x49,0x4E,0x47,0x0
000020 2020
000021 2020
000022 6675
000023 2000      	.DB  0x20,0x20,0x20,0x20,0x75,0x66,0x0,0x20
000024 2020
000025 6f20
000026 6d68
D:\YandexDisk\Практика\итог\Debug\List\Cmeter.asm(1121): warning: .cseg .db misalignment - padding zero byte
000027 0000      	.DB  0x20,0x20,0x20,0x6F,0x68,0x6D,0x0
                 _0x2000060:
D:\YandexDisk\Практика\итог\Debug\List\Cmeter.asm(1123): warning: .cseg .db misalignment - padding zero byte
000028 0001      	.DB  0x1
                 _0x2000000:
000029 4e2d
00002a 4e41
00002b 4900
00002c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\YandexDisk\Практика\итог\Debug\List\Cmeter.asm(1126): warning: .cseg .db misalignment - padding zero byte
00002d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00002e 0001      	.DW  0x01
00002f 0002      	.DW  0x02
000030 0026      	.DW  __REG_BIT_VARS*2
                 
000031 0001      	.DW  0x01
000032 0160      	.DW  _0x9
000033 0028      	.DW  _0x0*2
                 
000034 0001      	.DW  0x01
000035 016d      	.DW  __seed_G100
000036 0050      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 c1b9      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 15.05.2021
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;#define CUR2 PORTD.7
                 ;#define CUR1 PORTB.0
                 ;#define DISCH PORTB.1
                 ;#define LCD_LINE1 lcd_com(0x80)
                 ;#define LCD_LINE2 lcd_com(0xC0)
                 ;#define LCD_CLR lcd_com(0x01)
                 ;#define CLK 16  //MHz
                 ;#define CLK_PSL 8
                 ;#define REF 1.25
                 ;
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Standard Input/Output functions
                 ;//#include <stdio.h>
                 ;#include <stdlib.h>
                 ;//#include <string.h>
                 ;#include <iobits.h>
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned long t=0, T1=0, T2=0;
                 ;eeprom float I1=10.5, I2= 113.3;
                 ;bit mode = 0;
                 ;
                 ;void LCDcom(unsigned char com) //выполняет пол команды отправляет старший полубайт
                 ; 0000 0032 {
                 
                 	.CSEG
                 _LCDcom:
                 ; .FSTART _LCDcom
                 ; 0000 0033     com |= 0x08;                // Р3 в единицу, дабы горела подсветка
000064 93aa      	ST   -Y,R26
                 ;	com -> Y+0
000065 81e8      	LD   R30,Y
000066 60e8      	ORI  R30,8
000067 d319      	RCALL SUBOPT_0x0
                 ; 0000 0034     spi(com);    // Вывод данных
                 ; 0000 0035     SETBIT(PORTB,2);
                 ; 0000 0036     //delay_us(1);
                 ; 0000 0037     CLRBIT(PORTB,2);
                 ; 0000 0038     //delay_us(200);
                 ; 0000 0039     com |= 0x04;                // Е в единицу
000068 60e4      	ORI  R30,4
000069 d317      	RCALL SUBOPT_0x0
                 ; 0000 003A     spi(com);    // Вывод данных
                 ; 0000 003B     SETBIT(PORTB,2);
                 ; 0000 003C     //delay_us(1);
                 ; 0000 003D     CLRBIT(PORTB,2);
                 ; 0000 003E     //delay_us(200);
                 ; 0000 003F     com &= 0xFB;                // Е в ноль
00006a 7feb      	ANDI R30,0xFB
00006b 83e8      	ST   Y,R30
                 ; 0000 0040     spi(com);    // Вывод данных
00006c 81a8      	LD   R26,Y
00006d d31a      	RCALL SUBOPT_0x1
                 ; 0000 0041     SETBIT(PORTB,2);
                 ; 0000 0042     //delay_us(1);
                 ; 0000 0043     CLRBIT(PORTB,2);
                 ; 0000 0044     delay_ms(2);
00006e e0a2      	LDI  R26,LOW(2)
00006f d31c      	RCALL SUBOPT_0x2
                 ; 0000 0045 }
000070 c2c2      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;void lcd_com(unsigned char com)
                 ; 0000 0048     {
                 _lcd_com:
                 ; .FSTART _lcd_com
                 ; 0000 0049       LCDcom(com & 0xF0);
000071 93aa      	ST   -Y,R26
                 ;	com -> Y+0
000072 81e8      	LD   R30,Y
000073 7fe0      	ANDI R30,LOW(0xF0)
000074 2fae      	MOV  R26,R30
000075 dfee      	RCALL _LCDcom
                 ; 0000 004A       LCDcom((com <<4)&0xF0);
000076 81e8      	LD   R30,Y
000077 95e2      	SWAP R30
000078 7fe0      	ANDI R30,LOW(0xF0)
000079 2fae      	MOV  R26,R30
00007a dfe9      	RCALL _LCDcom
                 ; 0000 004B     }
00007b c2b7      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;void LCDinit()
                 ; 0000 004E {
                 _LCDinit:
                 ; .FSTART _LCDinit
                 ; 0000 004F     delay_ms(40);        // Пауза после подачи питания
00007c e2a8      	LDI  R26,LOW(40)
00007d d30e      	RCALL SUBOPT_0x2
                 ; 0000 0050     LCDcom(0x30);        // Переход в 4-х битный режим
00007e d30f      	RCALL SUBOPT_0x3
                 ; 0000 0051     delay_us(40);        // Задержка для выполнения команды
                 ; 0000 0052     LCDcom(0x30);        // Переход в 4-х битный режим
00007f d30e      	RCALL SUBOPT_0x3
                 ; 0000 0053     delay_us(40);        // Задержка для выполнения команды
                 ; 0000 0054     LCDcom(0x30);        // Переход в 4-х битный режим
000080 d30d      	RCALL SUBOPT_0x3
                 ; 0000 0055     delay_us(40);        // Задержка для выполнения команды
                 ; 0000 0056     LCDcom(0x20);        // Переход в 4-х битный режим
000081 e2a0      	LDI  R26,LOW(32)
000082 dfe1      	RCALL _LCDcom
                 ; 0000 0057     delay_us(40);        // Задержка для выполнения команды
                +
000083 ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
000084 958a     +DEC R24
000085 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0000 0058     LCDcom(0x20);        // Установка параметров
000086 e2a0      	LDI  R26,LOW(32)
000087 d30c      	RCALL SUBOPT_0x4
                 ; 0000 0059     LCDcom(0x80);        // Установка параметров
                 ; 0000 005A     LCDcom(0x00);        // Выключаем дисплей
000088 d30b      	RCALL SUBOPT_0x4
                 ; 0000 005B     LCDcom(0x80);        // Выключаем дисплей
                 ; 0000 005C     LCDcom(0x00);        // Очищаем дисплей
000089 dfda      	RCALL _LCDcom
                 ; 0000 005D     LCDcom(0x10);        // Очищаем дисплей
00008a e1a0      	LDI  R26,LOW(16)
00008b dfd8      	RCALL _LCDcom
                 ; 0000 005E     LCDcom(0x00);        // Устанавливаем режим ввода данных
00008c e0a0      	LDI  R26,LOW(0)
00008d dfd6      	RCALL _LCDcom
                 ; 0000 005F     LCDcom(0x60);        // Устанавливаем режим ввода данных
00008e e6a0      	LDI  R26,LOW(96)
00008f dfd4      	RCALL _LCDcom
                 ; 0000 0060     LCDcom(0x00);        // Включаем дисплей с выбранным курсором
000090 e0a0      	LDI  R26,LOW(0)
000091 dfd2      	RCALL _LCDcom
                 ; 0000 0061     LCDcom(0xC0);        // Включаем дисплей с выбранным курсором
000092 eca0      	LDI  R26,LOW(192)
000093 dfd0      	RCALL _LCDcom
                 ; 0000 0062 }
000094 9508      	RET
                 ; .FEND
                 ;
                 ;void char_out(unsigned char data)
                 ; 0000 0065 {
                 _char_out:
                 ; .FSTART _char_out
                 ; 0000 0066     unsigned char data_h = ((data & 0xF0) + 0x09);
                 ; 0000 0067     unsigned char data_l = ((data << 4) + 0x09);
                 ; 0000 0068 
                 ; 0000 0069 	spi(data_h); // Передача старших 4 бит
000095 93aa      	ST   -Y,R26
000096 d6c2      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	data_h -> R17
                 ;	data_l -> R16
000097 81ea      	LDD  R30,Y+2
000098 7fe0      	ANDI R30,LOW(0xF0)
000099 5fe7      	SUBI R30,-LOW(9)
00009a 2f1e      	MOV  R17,R30
00009b 81ea      	LDD  R30,Y+2
00009c 95e2      	SWAP R30
00009d 7fe0      	ANDI R30,0xF0
00009e 5fe7      	SUBI R30,-LOW(9)
00009f 2f0e      	MOV  R16,R30
0000a0 2fa1      	MOV  R26,R17
0000a1 d2e6      	RCALL SUBOPT_0x1
                 ; 0000 006A     SETBIT(PORTB,2);
                 ; 0000 006B     //delay_us(1);
                 ; 0000 006C     CLRBIT(PORTB,2);
                 ; 0000 006D     //delay_us(200);
                 ; 0000 006E 	data_h |= 0x04;
0000a2 6014      	ORI  R17,LOW(4)
                 ; 0000 006F     spi(data_h); // Передача старших 4 бит
0000a3 2fa1      	MOV  R26,R17
0000a4 d2e3      	RCALL SUBOPT_0x1
                 ; 0000 0070     SETBIT(PORTB,2);
                 ; 0000 0071     //delay_us(1);
                 ; 0000 0072     CLRBIT(PORTB,2);
                 ; 0000 0073     delay_us(200);
                +
0000a5 e280     +LDI R24 , LOW ( 800 )
0000a6 e093     +LDI R25 , HIGH ( 800 )
                +__DELAY_USW_LOOP :
0000a7 9701     +SBIW R24 , 1
0000a8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 800
                 ; 0000 0074 	data_h &= 0xF9;
0000a9 7f19      	ANDI R17,LOW(249)
                 ; 0000 0075 	spi(data_h); // Передача старших 4 бит
0000aa 2fa1      	MOV  R26,R17
0000ab d2dc      	RCALL SUBOPT_0x1
                 ; 0000 0076     SETBIT(PORTB,2);
                 ; 0000 0077     //delay_us(1);
                 ; 0000 0078     CLRBIT(PORTB,2);
                 ; 0000 0079 	delay_us(500);
                +
0000ac ed80     +LDI R24 , LOW ( 2000 )
0000ad e097     +LDI R25 , HIGH ( 2000 )
                +__DELAY_USW_LOOP :
0000ae 9701     +SBIW R24 , 1
0000af f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 2000
                 ; 0000 007A 	spi(data_l); // Передача младших 4 бит
0000b0 2fa0      	MOV  R26,R16
0000b1 d2d6      	RCALL SUBOPT_0x1
                 ; 0000 007B     SETBIT(PORTB,2);
                 ; 0000 007C     //delay_us(1);
                 ; 0000 007D     CLRBIT(PORTB,2);
                 ; 0000 007E     //delay_us(200);
                 ; 0000 007F 	data_l |= 0x04;
0000b2 6004      	ORI  R16,LOW(4)
                 ; 0000 0080 	spi(data_l); // Передача младших 4 бит
0000b3 2fa0      	MOV  R26,R16
0000b4 d2d3      	RCALL SUBOPT_0x1
                 ; 0000 0081     SETBIT(PORTB,2);
                 ; 0000 0082     //delay_us(1);
                 ; 0000 0083     CLRBIT(PORTB,2);
                 ; 0000 0084     //delay_us(200);
                 ; 0000 0085 	data_l &= 0xF9;
0000b5 7f09      	ANDI R16,LOW(249)
                 ; 0000 0086 	spi(data_l); // Передача младших 4 бит
0000b6 2fa0      	MOV  R26,R16
0000b7 d2d0      	RCALL SUBOPT_0x1
                 ; 0000 0087     SETBIT(PORTB,2);
                 ; 0000 0088     //delay_us(1);
                 ; 0000 0089     CLRBIT(PORTB,2);
                 ; 0000 008A     delay_ms(2);
0000b8 e0a2      	LDI  R26,LOW(2)
0000b9 d2d2      	RCALL SUBOPT_0x2
                 ; 0000 008B }
0000ba d6a1      	RCALL __LOADLOCR2
0000bb 9623      	ADIW R28,3
0000bc 9508      	RET
                 ; .FEND
                 ;
                 ;void str_out(char *str)
                 ; 0000 008E     {
                 _str_out:
                 ; .FSTART _str_out
                 ; 0000 008F         while (*str!='\0')
0000bd d2db      	RCALL SUBOPT_0x5
                 ;	*str -> Y+0
                 _0x3:
0000be 81a8      	LD   R26,Y
0000bf 81b9      	LDD  R27,Y+1
0000c0 91ec      	LD   R30,X
0000c1 30e0      	CPI  R30,0
0000c2 f031      	BREQ _0x5
                 ; 0000 0090             {
                 ; 0000 0091               char_out(*str++);
0000c3 91ed      	LD   R30,X+
0000c4 83a8      	ST   Y,R26
0000c5 83b9      	STD  Y+1,R27
0000c6 2fae      	MOV  R26,R30
0000c7 dfcd      	RCALL _char_out
                 ; 0000 0092             }
0000c8 cff5      	RJMP _0x3
                 _0x5:
                 ; 0000 0093     }
0000c9 c00f      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void strf_out(flash char *str)
                 ; 0000 0096     {
                 _strf_out:
                 ; .FSTART _strf_out
                 ; 0000 0097         while (*str!='\0')
0000ca d2ce      	RCALL SUBOPT_0x5
                 ;	*str -> Y+0
                 _0x6:
0000cb 81e8      	LD   R30,Y
0000cc 81f9      	LDD  R31,Y+1
0000cd 91e4      	LPM  R30,Z
0000ce 30e0      	CPI  R30,0
0000cf f049      	BREQ _0x8
                 ; 0000 0098             {
                 ; 0000 0099               char_out(*str++);
0000d0 81e8      	LD   R30,Y
0000d1 81f9      	LDD  R31,Y+1
0000d2 9631      	ADIW R30,1
0000d3 83e8      	ST   Y,R30
0000d4 83f9      	STD  Y+1,R31
0000d5 9731      	SBIW R30,1
0000d6 91a4      	LPM  R26,Z
0000d7 dfbd      	RCALL _char_out
                 ; 0000 009A             }
0000d8 cff2      	RJMP _0x6
                 _0x8:
                 ; 0000 009B     }
                 _0x20A0005:
0000d9 9622      	ADIW R28,2
0000da 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_printf(float f, unsigned char n){
                 ; 0000 009D void lcd_printf(float f, unsigned char n){
                 _lcd_printf:
                 ; .FSTART _lcd_printf
                 ; 0000 009E     char *str = "";
                 ; 0000 009F     ftoa(f, n, str);
0000db 93aa      	ST   -Y,R26
0000dc d67c      	RCALL __SAVELOCR2
                 ;	f -> Y+3
                 ;	n -> Y+2
                 ;	*str -> R16,R17
                +
0000dd e600     +LDI R16 , LOW ( _0x9 + ( 0 ) )
0000de e011     +LDI R17 , HIGH ( _0x9 + ( 0 ) )
                 	__POINTWRMN 16,17,_0x9,0
                +
0000df 81eb     +LDD R30 , Y + 3
0000e0 81fc     +LDD R31 , Y + 3 + 1
0000e1 816d     +LDD R22 , Y + 3 + 2
0000e2 817e     +LDD R23 , Y + 3 + 3
                 	__GETD1S 3
0000e3 d625      	RCALL __PUTPARD1
0000e4 81ee      	LDD  R30,Y+6
0000e5 93ea      	ST   -Y,R30
0000e6 01d8      	MOVW R26,R16
0000e7 d1b7      	RCALL _ftoa
                 ; 0000 00A0     str_out(str);
0000e8 01d8      	MOVW R26,R16
0000e9 dfd3      	RCALL _str_out
                 ; 0000 00A1 }
0000ea d671      	RCALL __LOADLOCR2
0000eb 9627      	ADIW R28,7
0000ec 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x9:
000160           	.BYTE 0x1
                 ;
                 ;void check( float C){
                 ; 0000 00A3 void check( float C){
                 
                 	.CSEG
                 _check:
                 ; .FSTART _check
                 ; 0000 00A4  CUR1 = 0;
0000ed d620      	RCALL __PUTPARD2
                 ;	C -> Y+0
0000ee d2ad      	RCALL SUBOPT_0x6
                 ; 0000 00A5  CUR2 = 0;
                 ; 0000 00A6  mode = 1;
0000ef 9468      	SET
0000f0 f820      	BLD  R2,0
                 ; 0000 00A7  LCD_CLR;
0000f1 d2ad      	RCALL SUBOPT_0x7
                 ; 0000 00A8  LCD_LINE1;
                 ; 0000 00A9  strf_out("CHECK");
                +
0000f2 e2a9     +LDI R26 , LOW ( 2 * _0x0 + ( 1 ) )
0000f3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW2FN _0x0,1
0000f4 dfd5      	RCALL _strf_out
                 ; 0000 00AA  SETBIT(SFIOR, ACME);
0000f5 b7e0      	IN   R30,0x30
0000f6 60e8      	ORI  R30,8
0000f7 bfe0      	OUT  0x30,R30
                 ; 0000 00AB  SETBIT(TCCR1B,CS11);
0000f8 d2aa      	RCALL SUBOPT_0x8
                 ; 0000 00AC  #asm("sei")
0000f9 9478      	sei
                 ; 0000 00AD  SETBIT(PORTD, PORTD0);
0000fa 9a90      	SBI  0x12,0
                 ; 0000 00AE  DISCH=1;
0000fb d2ab      	RCALL SUBOPT_0x9
                 ; 0000 00AF  delay_ms(1000);
                 ; 0000 00B0  CUR2=1;
0000fc 9a97      	SBI  0x12,7
                 ; 0000 00B1  DISCH=0;
0000fd d2ad      	RCALL SUBOPT_0xA
                 ; 0000 00B2  TCNT1=0;
                 ; 0000 00B3  CLRBIT(TIMSK, TICIE1);
                 ; 0000 00B4  ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
                 ; 0000 00B5  SETBIT(TIFR,ICF1);
                 ; 0000 00B6  SETBIT(TIMSK, TICIE1);
                 ; 0000 00B7  T1=0;
                 ; 0000 00B8  T2=0;
                 ; 0000 00B9  t=0;
                 ; 0000 00BA  while(!T2);
                 _0x14:
0000fe d2d7      	RCALL SUBOPT_0xB
0000ff d655      	RCALL __CPD10
000100 f3e9      	BREQ _0x14
                 ; 0000 00BB  CUR2=0;
000101 9897      	CBI  0x12,7
                 ; 0000 00BC  I2 = (1265)/((float)T2/(CLK/CLK_PSL))*C;
000102 d2dc      	RCALL SUBOPT_0xC
000103 d2ec      	RCALL SUBOPT_0xD
000104 d62f      	RCALL __EEPROMWRD
                 ; 0000 00BD 
                 ; 0000 00BE 
                 ; 0000 00BF 
                 ; 0000 00C0 
                 ; 0000 00C1  DISCH=1;
000105 d2a1      	RCALL SUBOPT_0x9
                 ; 0000 00C2  delay_ms(1000);
                 ; 0000 00C3  CUR1=1;
000106 9ac0      	SBI  0x18,0
                 ; 0000 00C4  DISCH=0;
000107 d2a3      	RCALL SUBOPT_0xA
                 ; 0000 00C5  TCNT1=0;
                 ; 0000 00C6  CLRBIT(TIMSK, TICIE1);
                 ; 0000 00C7  ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
                 ; 0000 00C8  SETBIT(TIFR,ICF1);
                 ; 0000 00C9  SETBIT(TIMSK, TICIE1);
                 ; 0000 00CA  T1=0;
                 ; 0000 00CB  T2=0;
                 ; 0000 00CC  t=0;
                 ; 0000 00CD  while(!T2);
                 _0x1F:
000108 d2cd      	RCALL SUBOPT_0xB
000109 d64b      	RCALL __CPD10
00010a f3e9      	BREQ _0x1F
                 ; 0000 00CE  CUR1=0;
00010b 98c0      	CBI  0x18,0
                 ; 0000 00CF  I1 = (1265)/((float)T2/(CLK/CLK_PSL))*C;
00010c d2d2      	RCALL SUBOPT_0xC
00010d d2e5      	RCALL SUBOPT_0xE
00010e d625      	RCALL __EEPROMWRD
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2  DISCH=1;
00010f 9ac1      	SBI  0x18,1
                 ; 0000 00D3  LCD_CLR;
000110 d28e      	RCALL SUBOPT_0x7
                 ; 0000 00D4  LCD_LINE1;
                 ; 0000 00D5  lcd_printf(I1,1 );
000111 d2e1      	RCALL SUBOPT_0xE
000112 d2e3      	RCALL SUBOPT_0xF
                 ; 0000 00D6  strf_out("mA");
                 ; 0000 00D7  LCD_LINE2;
000113 d2e9      	RCALL SUBOPT_0x10
                 ; 0000 00D8  lcd_printf(I2,1);
                 ; 0000 00D9  strf_out("mA");
                 ; 0000 00DA  CLRBIT(PORTD, PORTD0);
000114 9890      	CBI  0x12,0
                 ; 0000 00DB 
                 ; 0000 00DC  mode = 0;
000115 94e8      	CLT
000116 f820      	BLD  R2,0
                 ; 0000 00DD  CLRBIT(TCCR1B,CS11);
000117 b5ee      	IN   R30,0x2E
000118 7fed      	ANDI R30,0xFD
000119 bdee      	OUT  0x2E,R30
                 ; 0000 00DE 
                 ; 0000 00DF 
                 ; 0000 00E0 }
00011a c258      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;float testC(){
                 ; 0000 00E2 float testC(){
                 _testC:
                 ; .FSTART _testC
                 ; 0000 00E3 float C = 0;
                 ; 0000 00E4 #asm("cli")
00011b d2e5      	RCALL SUBOPT_0x11
                 ;	C -> Y+0
00011c 94f8      	cli
                 ; 0000 00E5 CUR1 = 0;
00011d d27e      	RCALL SUBOPT_0x6
                 ; 0000 00E6 CUR2 = 0;
                 ; 0000 00E7 DISCH=1;
00011e d288      	RCALL SUBOPT_0x9
                 ; 0000 00E8 delay_ms(1000);
                 ; 0000 00E9 SETBIT(TCCR1B,CS11);
00011f d283      	RCALL SUBOPT_0x8
                 ; 0000 00EA CLRBIT(ADMUX,MUX0);
000120 d2e7      	RCALL SUBOPT_0x12
                 ; 0000 00EB SETBIT(TIFR,ICF1);
                 ; 0000 00EC #asm("sei")
000121 9478      	sei
                 ; 0000 00ED CUR1=1;
000122 9ac0      	SBI  0x18,0
                 ; 0000 00EE t = 0;
000123 d2e9      	RCALL SUBOPT_0x13
                 ; 0000 00EF TCNT1 = 0;
                 ; 0000 00F0 T1 = 0;
                 ; 0000 00F1 T2 = 0;
                 ; 0000 00F2 DISCH = 0;
                 ; 0000 00F3 while (!T1);
                 _0x30:
000124 d307      	RCALL SUBOPT_0x14
000125 f3f1      	BREQ _0x30
                 ; 0000 00F4 if (t > 4) {  //~>1000uF
000126 d30f      	RCALL SUBOPT_0x15
                +
000127 30a5     +CPI R26 , LOW ( 0x5 )
000128 e0e0     +LDI R30 , HIGH ( 0x5 )
000129 07be     +CPC R27 , R30
00012a e0e0     +LDI R30 , BYTE3 ( 0x5 )
00012b 078e     +CPC R24 , R30
00012c e0e0     +LDI R30 , BYTE4 ( 0x5 )
00012d 079e     +CPC R25 , R30
                 	__CPD2N 0x5
00012e f0d8      	BRLO _0x33
                 ; 0000 00F5     #asm("cli")
00012f 94f8      	cli
                 ; 0000 00F6     CUR1 = 0;
000130 98c0      	CBI  0x18,0
                 ; 0000 00F7     DISCH = 1;
000131 9ac1      	SBI  0x18,1
                 ; 0000 00F8     delay_ms(500);
000132 efa4      	LDI  R26,LOW(500)
000133 e0b1      	LDI  R27,HIGH(500)
000134 d3ba      	RCALL _delay_ms
                 ; 0000 00F9     CLRBIT(ADMUX,MUX0);
000135 d2d2      	RCALL SUBOPT_0x12
                 ; 0000 00FA     SETBIT(TIFR,ICF1);
                 ; 0000 00FB     #asm("sei")
000136 9478      	sei
                 ; 0000 00FC     CUR2 = 1;
000137 9a97      	SBI  0x12,7
                 ; 0000 00FD     t = 0;
000138 d2d4      	RCALL SUBOPT_0x13
                 ; 0000 00FE     TCNT1 = 0;
                 ; 0000 00FF     T1 = 0;
                 ; 0000 0100     T2 = 0;
                 ; 0000 0101     DISCH = 0;
                 ; 0000 0102     while (!T1);
                 _0x3C:
000139 d2f2      	RCALL SUBOPT_0x14
00013a f3f1      	BREQ _0x3C
                 ; 0000 0103     while ((T2<T1/2) | (!T2));
                 _0x3F:
00013b d303      	RCALL SUBOPT_0x16
00013c f7f1      	BRNE _0x3F
                 ; 0000 0104     CUR2 = 0;
00013d 9897      	CBI  0x12,7
                 ; 0000 0105     C =  (I2*((float)T2/(CLK/CLK_PSL)))/(1265);
00013e d2b1      	RCALL SUBOPT_0xD
00013f d5e0      	RCALL __EEPROMRDD
000140 937f      	PUSH R23
000141 936f      	PUSH R22
000142 93ff      	PUSH R31
000143 93ef      	PUSH R30
000144 d311      	RCALL SUBOPT_0x17
000145 91af      	POP  R26
000146 91bf      	POP  R27
000147 918f      	POP  R24
000148 919f      	POP  R25
000149 c00e      	RJMP _0x6C
                 ; 0000 0106 }
                 ; 0000 0107 else {
                 _0x33:
                 ; 0000 0108     while ((T2<T1/2) | (!T2));
                 _0x45:
00014a d2f4      	RCALL SUBOPT_0x16
00014b f7f1      	BRNE _0x45
                 ; 0000 0109     CUR1 = 0;
00014c 98c0      	CBI  0x18,0
                 ; 0000 010A     C =  (I1*((float)T2/(CLK/CLK_PSL)))/(1265);
00014d d2a5      	RCALL SUBOPT_0xE
00014e d5d1      	RCALL __EEPROMRDD
00014f 937f      	PUSH R23
000150 936f      	PUSH R22
000151 93ff      	PUSH R31
000152 93ef      	PUSH R30
000153 d302      	RCALL SUBOPT_0x17
000154 91af      	POP  R26
000155 91bf      	POP  R27
000156 918f      	POP  R24
000157 919f      	POP  R25
                 _0x6C:
000158 d496      	RCALL __MULF12
000159 01df      	MOVW R26,R30
00015a 01cb      	MOVW R24,R22
                +
00015b e0e0     +LDI R30 , LOW ( 0x449E2000 )
00015c e2f0     +LDI R31 , HIGH ( 0x449E2000 )
00015d e96e     +LDI R22 , BYTE3 ( 0x449E2000 )
00015e e474     +LDI R23 , BYTE4 ( 0x449E2000 )
                 	__GETD1N 0x449E2000
00015f d4dd      	RCALL __DIVF21
000160 d2ff      	RCALL SUBOPT_0x18
                 ; 0000 010B }
                 ; 0000 010C return C;
000161 d300      	RCALL SUBOPT_0x19
000162 c210      	RJMP _0x20A0001
                 ; 0000 010D }
                 ; .FEND
                 ;
                 ;
                 ;float esr(float C){
                 ; 0000 0110 float esr(float C){
                 _esr:
                 ; .FSTART _esr
                 ; 0000 0111     float R = 0;
                 ; 0000 0112     #asm("cli")
000163 d5aa      	RCALL __PUTPARD2
000164 d29c      	RCALL SUBOPT_0x11
                 ;	C -> Y+4
                 ;	R -> Y+0
000165 94f8      	cli
                 ; 0000 0113     CUR1 = 0;
000166 d235      	RCALL SUBOPT_0x6
                 ; 0000 0114     CUR2 = 0;
                 ; 0000 0115     DISCH = 1;
000167 9ac1      	SBI  0x18,1
                 ; 0000 0116     delay_ms(2000);
000168 eda0      	LDI  R26,LOW(2000)
000169 e0b7      	LDI  R27,HIGH(2000)
00016a d384      	RCALL _delay_ms
                 ; 0000 0117     SETBIT(TCCR1B,CS11);
00016b d237      	RCALL SUBOPT_0x8
                 ; 0000 0118     //CLRBIT(ADMUX,MUX0);
                 ; 0000 0119     ADMUX |= (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (0 << MUX0);
00016c 9a39      	SBI  0x7,1
                 ; 0000 011A     SETBIT(TIFR,ICF1);
00016d d2f6      	RCALL SUBOPT_0x1A
                 ; 0000 011B     #asm("sei")
00016e 9478      	sei
                 ; 0000 011C     DISCH = 0;
00016f 98c1      	CBI  0x18,1
                 ; 0000 011D     CUR2 = 1;
000170 9a97      	SBI  0x12,7
                 ; 0000 011E     TCNT1 = 0;
000171 d2f6      	RCALL SUBOPT_0x1B
                 ; 0000 011F                 //пока оставить такой порядок, наиболее точно и быстро
                 ; 0000 0120     t = 0;
000172 d2fa      	RCALL SUBOPT_0x1C
                 ; 0000 0121     T1 = 0;
000173 e0e0      	LDI  R30,LOW(0)
000174 93e0 0165 	STS  _T1,R30
000176 93e0 0166 	STS  _T1+1,R30
000178 93e0 0167 	STS  _T1+2,R30
00017a 93e0 0168 	STS  _T1+3,R30
                 ; 0000 0122     while(!T1);
                 _0x54:
00017c d2af      	RCALL SUBOPT_0x14
00017d f3f1      	BREQ _0x54
                 ; 0000 0123     R = (1235)/I2 - ((float)T1/(CLK/CLK_PSL))/C;
00017e d271      	RCALL SUBOPT_0xD
00017f d5a0      	RCALL __EEPROMRDD
                +
000180 e0a0     +LDI R26 , LOW ( 0x449A6000 )
000181 e6b0     +LDI R27 , HIGH ( 0x449A6000 )
000182 e98a     +LDI R24 , BYTE3 ( 0x449A6000 )
000183 e494     +LDI R25 , BYTE4 ( 0x449A6000 )
                 	__GETD2N 0x449A6000
000184 d4b8      	RCALL __DIVF21
000185 937f      	PUSH R23
000186 936f      	PUSH R22
000187 93ff      	PUSH R31
000188 93ef      	PUSH R30
000189 91e0 0165 	LDS  R30,_T1
00018b 91f0 0166 	LDS  R31,_T1+1
00018d 9160 0167 	LDS  R22,_T1+2
00018f 9170 0168 	LDS  R23,_T1+3
000191 d3d1      	RCALL __CDF1U
000192 01df      	MOVW R26,R30
000193 01cb      	MOVW R24,R22
                +
000194 e0e0     +LDI R30 , LOW ( 0x40000000 )
000195 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000196 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000197 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000198 d4a4      	RCALL __DIVF21
000199 01df      	MOVW R26,R30
00019a 01cb      	MOVW R24,R22
00019b d2db      	RCALL SUBOPT_0x1D
00019c d4a0      	RCALL __DIVF21
00019d 91af      	POP  R26
00019e 91bf      	POP  R27
00019f 918f      	POP  R24
0001a0 919f      	POP  R25
0001a1 d571      	RCALL __SWAPD12
0001a2 d3f5      	RCALL __SUBF12
0001a3 d2bc      	RCALL SUBOPT_0x18
                 ; 0000 0124     CUR1 = 0;
0001a4 d1f7      	RCALL SUBOPT_0x6
                 ; 0000 0125     CUR2 = 0;
                 ; 0000 0126     DISCH = 1;
0001a5 9ac1      	SBI  0x18,1
                 ; 0000 0127     return R;
0001a6 d2bb      	RCALL SUBOPT_0x19
0001a7 9628      	ADIW R28,8
0001a8 9508      	RET
                 ; 0000 0128 }
                 ; .FEND
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 012D {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0001a9 d2d2      	RCALL SUBOPT_0x1E
                 ; 0000 012E     delay_ms(100);
0001aa e6a4      	LDI  R26,LOW(100)
0001ab d1e0      	RCALL SUBOPT_0x2
                 ; 0000 012F     SETBIT(TIFR,ICF1);
0001ac d2b7      	RCALL SUBOPT_0x1A
                 ; 0000 0130     #asm("sei")
0001ad 9478      	sei
                 ; 0000 0131     check(6.89);
                +
0001ae eea1     +LDI R26 , LOW ( 0x40DC7AE1 )
0001af e7ba     +LDI R27 , HIGH ( 0x40DC7AE1 )
0001b0 ed8c     +LDI R24 , BYTE3 ( 0x40DC7AE1 )
0001b1 e490     +LDI R25 , BYTE4 ( 0x40DC7AE1 )
                 	__GETD2N 0x40DC7AE1
0001b2 df3a      	RCALL _check
                 ; 0000 0132 }
0001b3 c019      	RJMP _0x6F
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0138 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0001b4 d2c7      	RCALL SUBOPT_0x1E
                 ; 0000 0139         t++;
0001b5 e6a1      	LDI  R26,LOW(_t)
0001b6 e0b1      	LDI  R27,HIGH(_t)
0001b7 d538      	RCALL __GETD1P_INC
                +
0001b8 5fef     +SUBI R30 , LOW ( - 1 )
0001b9 4fff     +SBCI R31 , HIGH ( - 1 )
0001ba 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0001bb 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0001bc d538      	RCALL __PUTDP1_DEC
                 ; 0000 013A         if((t > (CLK/CLK_PSL)*30) & (!mode)){
0001bd d278      	RCALL SUBOPT_0x15
                +
0001be e3ec     +LDI R30 , LOW ( 0x3C )
0001bf e0f0     +LDI R31 , HIGH ( 0x3C )
0001c0 e060     +LDI R22 , BYTE3 ( 0x3C )
0001c1 e070     +LDI R23 , BYTE4 ( 0x3C )
                 	__GETD1N 0x3C
0001c2 d4fe      	RCALL __GTD12U
0001c3 2fae      	MOV  R26,R30
0001c4 e0e0      	LDI  R30,0
0001c5 fe20      	SBRS R2,0
0001c6 e0e1      	LDI  R30,1
0001c7 23ea      	AND  R30,R26
0001c8 f021      	BREQ _0x5D
                 ; 0000 013B             LCD_CLR;
0001c9 d2c0      	RCALL SUBOPT_0x1F
                 ; 0000 013C             strf_out("ERROR");
                +
0001ca e3a2     +LDI R26 , LOW ( 2 * _0x0 + ( 10 ) )
0001cb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW2FN _0x0,10
0001cc defd      	RCALL _strf_out
                 ; 0000 013D         }
                 ; 0000 013E 
                 ; 0000 013F }
                 _0x5D:
                 _0x6F:
0001cd 91e9      	LD   R30,Y+
0001ce bfef      	OUT  SREG,R30
0001cf 91f9      	LD   R31,Y+
0001d0 91e9      	LD   R30,Y+
0001d1 91b9      	LD   R27,Y+
0001d2 91a9      	LD   R26,Y+
0001d3 9199      	LD   R25,Y+
0001d4 9189      	LD   R24,Y+
0001d5 9179      	LD   R23,Y+
0001d6 9169      	LD   R22,Y+
0001d7 90f9      	LD   R15,Y+
0001d8 9019      	LD   R1,Y+
0001d9 9009      	LD   R0,Y+
0001da 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 0143 {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
0001db 920a      	ST   -Y,R0
0001dc 921a      	ST   -Y,R1
0001dd 936a      	ST   -Y,R22
0001de 937a      	ST   -Y,R23
0001df 938a      	ST   -Y,R24
0001e0 939a      	ST   -Y,R25
0001e1 93aa      	ST   -Y,R26
0001e2 93ba      	ST   -Y,R27
0001e3 93ea      	ST   -Y,R30
0001e4 93fa      	ST   -Y,R31
0001e5 b7ef      	IN   R30,SREG
0001e6 93ea      	ST   -Y,R30
                 ; 0000 0144         if (TSTBIT(ADMUX, MUX1)) {
0001e7 9b39      	SBIS 0x7,1
0001e8 c005      	RJMP _0x5E
                 ; 0000 0145             TCNT1 = 0;                                //мултиплексор на 0
0001e9 d27e      	RCALL SUBOPT_0x1B
                 ; 0000 0146             //PORTD.0 = 1;
                 ; 0000 0147             ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
0001ea b1e7      	IN   R30,0x7
0001eb 7fe0      	ANDI R30,LOW(0xF0)
0001ec b9e7      	OUT  0x7,R30
                 ; 0000 0148             }
                 ; 0000 0149         else if (TSTBIT(ADMUX, MUX0)==0){
0001ed c021      	RJMP _0x5F
                 _0x5E:
0001ee 9938      	SBIC 0x7,0
0001ef c016      	RJMP _0x60
                 ; 0000 014A             TCNT1=0;
0001f0 d277      	RCALL SUBOPT_0x1B
                 ; 0000 014B             //PORTD.1 = 1;
                 ; 0000 014C             SETBIT(ADMUX, MUX0);
0001f1 9a38      	SBI  0x7,0
                 ; 0000 014D             T1 = t*0xFFFF + ICR1;
0001f2 d299      	RCALL SUBOPT_0x20
0001f3 93e0 0165 	STS  _T1,R30
0001f5 93f0 0166 	STS  _T1+1,R31
0001f7 9360 0167 	STS  _T1+2,R22
0001f9 9370 0168 	STS  _T1+3,R23
                 ; 0000 014E             T2=0;
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 93e0 0169 	STS  _T2,R30
0001fe 93e0 016a 	STS  _T2+1,R30
000200 93e0 016b 	STS  _T2+2,R30
000202 93e0 016c 	STS  _T2+3,R30
                 ; 0000 014F             t=0;
000204 d268      	RCALL SUBOPT_0x1C
                 ; 0000 0150 
                 ; 0000 0151 
                 ; 0000 0152         }
                 ; 0000 0153         else{
000205 c009      	RJMP _0x61
                 _0x60:
                 ; 0000 0154             //PORTD.3 = 1;
                 ; 0000 0155             T2 = t*0xFFFF + ICR1;
000206 d285      	RCALL SUBOPT_0x20
000207 93e0 0169 	STS  _T2,R30
000209 93f0 016a 	STS  _T2+1,R31
00020b 9360 016b 	STS  _T2+2,R22
00020d 9370 016c 	STS  _T2+3,R23
                 ; 0000 0156         }
                 _0x61:
                 _0x5F:
                 ; 0000 0157          SETBIT(TIFR,ICF1);
00020f d254      	RCALL SUBOPT_0x1A
                 ; 0000 0158 }
000210 91e9      	LD   R30,Y+
000211 bfef      	OUT  SREG,R30
000212 91f9      	LD   R31,Y+
000213 91e9      	LD   R30,Y+
000214 91b9      	LD   R27,Y+
000215 91a9      	LD   R26,Y+
000216 9199      	LD   R25,Y+
000217 9189      	LD   R24,Y+
000218 9179      	LD   R23,Y+
000219 9169      	LD   R22,Y+
00021a 9019      	LD   R1,Y+
00021b 9009      	LD   R0,Y+
00021c 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 015D {
                 _main:
                 ; .FSTART _main
                 ; 0000 015E // Declare your local variables here
                 ; 0000 015F float C = 0, R=0;
                 ; 0000 0160 
                 ; 0000 0161 
                 ; 0000 0162 // Input/Output Ports initialization
                 ; 0000 0163 // Port B initialization
                 ; 0000 0164 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0165 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00021d 9728      	SBIW R28,8
00021e d282      	RCALL SUBOPT_0x21
00021f e0e0      	LDI  R30,LOW(0)
000220 83eb      	STD  Y+3,R30
000221 83ec      	STD  Y+4,R30
000222 83ed      	STD  Y+5,R30
000223 83ee      	STD  Y+6,R30
000224 83ef      	STD  Y+7,R30
                 ;	C -> Y+4
                 ;	R -> Y+0
000225 e2ef      	LDI  R30,LOW(47)
000226 bbe7      	OUT  0x17,R30
                 ; 0000 0166 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0167 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000227 e0e0      	LDI  R30,LOW(0)
000228 bbe8      	OUT  0x18,R30
                 ; 0000 0168 
                 ; 0000 0169 // Port C initialization
                 ; 0000 016A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 016B DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000229 bbe4      	OUT  0x14,R30
                 ; 0000 016C // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 016D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00022a bbe5      	OUT  0x15,R30
                 ; 0000 016E 
                 ; 0000 016F // Port D initialization
                 ; 0000 0170 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0171 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
00022b e8e1      	LDI  R30,LOW(129)
00022c bbe1      	OUT  0x11,R30
                 ; 0000 0172 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0173 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00022d e0e4      	LDI  R30,LOW(4)
00022e bbe2      	OUT  0x12,R30
                 ; 0000 0174 
                 ; 0000 0175 // Timer/Counter 0 initialization
                 ; 0000 0176 // Clock source: System Clock
                 ; 0000 0177 // Clock value: 1000,000 kHz
                 ; 0000 0178 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
00022f e0e0      	LDI  R30,LOW(0)
000230 bfe3      	OUT  0x33,R30
                 ; 0000 0179 TCNT0=0x00;
000231 bfe2      	OUT  0x32,R30
                 ; 0000 017A 
                 ; 0000 017B // Timer/Counter 1 initialization
                 ; 0000 017C // Clock source: System Clock
                 ; 0000 017D // Clock value: 1000,000 kHz
                 ; 0000 017E // Mode: Normal top=0xFFFF
                 ; 0000 017F // OC1A output: Disconnected
                 ; 0000 0180 // OC1B output: Disconnected
                 ; 0000 0181 // Noise Canceler: Off
                 ; 0000 0182 // Input Capture on Rising Edge
                 ; 0000 0183 // Timer Period: 65,536 ms
                 ; 0000 0184 // Timer1 Overflow Interrupt: On
                 ; 0000 0185 // Input Capture Interrupt: On
                 ; 0000 0186 // Compare A Match Interrupt: Off
                 ; 0000 0187 // Compare B Match Interrupt: Off
                 ; 0000 0188 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000232 bdef      	OUT  0x2F,R30
                 ; 0000 0189 TCCR1B=(0<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000233 e4e2      	LDI  R30,LOW(66)
000234 bdee      	OUT  0x2E,R30
                 ; 0000 018A TCNT1H=0x00;
000235 e0e0      	LDI  R30,LOW(0)
000236 bded      	OUT  0x2D,R30
                 ; 0000 018B TCNT1L=0x00;
000237 bdec      	OUT  0x2C,R30
                 ; 0000 018C ICR1H=0x00;
000238 bde7      	OUT  0x27,R30
                 ; 0000 018D ICR1L=0x00;
000239 bde6      	OUT  0x26,R30
                 ; 0000 018E OCR1AH=0x00;
00023a bdeb      	OUT  0x2B,R30
                 ; 0000 018F OCR1AL=0x00;
00023b bdea      	OUT  0x2A,R30
                 ; 0000 0190 OCR1BH=0x00;
00023c bde9      	OUT  0x29,R30
                 ; 0000 0191 OCR1BL=0x00;
00023d bde8      	OUT  0x28,R30
                 ; 0000 0192 
                 ; 0000 0193 // Timer/Counter 2 initialization
                 ; 0000 0194 // Clock source: System Clock
                 ; 0000 0195 // Clock value: Timer2 Stopped
                 ; 0000 0196 // Mode: Normal top=0xFF
                 ; 0000 0197 // OC2 output: Disconnected
                 ; 0000 0198 ASSR=0<<AS2;
00023e bde2      	OUT  0x22,R30
                 ; 0000 0199 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00023f bde5      	OUT  0x25,R30
                 ; 0000 019A TCNT2=0x00;
000240 bde4      	OUT  0x24,R30
                 ; 0000 019B OCR2=0x00;
000241 bde3      	OUT  0x23,R30
                 ; 0000 019C 
                 ; 0000 019D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 019E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000242 e2e4      	LDI  R30,LOW(36)
000243 bfe9      	OUT  0x39,R30
                 ; 0000 019F 
                 ; 0000 01A0 // External Interrupt(s) initialization
                 ; 0000 01A1 // INT0: On
                 ; 0000 01A2 // INT0 Mode: Any change
                 ; 0000 01A3 // INT1: Off
                 ; 0000 01A4 GICR|=(0<<INT1) | (1<<INT0);
000244 b7eb      	IN   R30,0x3B
000245 64e0      	ORI  R30,0x40
000246 bfeb      	OUT  0x3B,R30
                 ; 0000 01A5 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
000247 e0e1      	LDI  R30,LOW(1)
000248 bfe5      	OUT  0x35,R30
                 ; 0000 01A6 GIFR=(0<<INTF1) | (1<<INTF0);
000249 e4e0      	LDI  R30,LOW(64)
00024a bfea      	OUT  0x3A,R30
                 ; 0000 01A7 
                 ; 0000 01A8 // USART initialization
                 ; 0000 01A9 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01AA // USART Receiver: Off
                 ; 0000 01AB // USART Transmitter: On
                 ; 0000 01AC // USART Mode: Asynchronous
                 ; 0000 01AD // USART Baud Rate: 9600
                 ; 0000 01AE UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00024b e0e0      	LDI  R30,LOW(0)
00024c b9eb      	OUT  0xB,R30
                 ; 0000 01AF UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00024d b9ea      	OUT  0xA,R30
                 ; 0000 01B0 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00024e e8e6      	LDI  R30,LOW(134)
00024f bde0      	OUT  0x20,R30
                 ; 0000 01B1 UBRRH=0x00;
000250 e0e0      	LDI  R30,LOW(0)
000251 bde0      	OUT  0x20,R30
                 ; 0000 01B2 UBRRL=0x33;
000252 e3e3      	LDI  R30,LOW(51)
000253 b9e9      	OUT  0x9,R30
                 ; 0000 01B3 
                 ; 0000 01B4 // Analog Comparator initialization
                 ; 0000 01B5 // Analog Comparator: On
                 ; 0000 01B6 // The Analog Comparator's positive input is
                 ; 0000 01B7 // connected to the AIN0 pin
                 ; 0000 01B8 // The Analog Comparator's negative input is
                 ; 0000 01B9 // connected to the ADC multiplexer
                 ; 0000 01BA // Interrupt on Rising Output Edge
                 ; 0000 01BB // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01BC ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (1<<ACI) | (0<<ACIE) | (1<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
000254 e1e7      	LDI  R30,LOW(23)
000255 b9e8      	OUT  0x8,R30
                 ; 0000 01BD SFIOR=(1<<ACME);
000256 e0e8      	LDI  R30,LOW(8)
000257 bfe0      	OUT  0x30,R30
                 ; 0000 01BE 
                 ; 0000 01BF // ADC initialization
                 ; 0000 01C0 // ADC disabled
                 ; 0000 01C1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000258 e0e7      	LDI  R30,LOW(7)
000259 b9e6      	OUT  0x6,R30
                 ; 0000 01C2 ADMUX = 0;
00025a e0e0      	LDI  R30,LOW(0)
00025b b9e7      	OUT  0x7,R30
                 ; 0000 01C3 
                 ; 0000 01C4 // SPI initialization
                 ; 0000 01C5 // SPI Type: Master
                 ; 0000 01C6 // SPI Clock Rate: 500,000 kHz
                 ; 0000 01C7 // SPI Clock Phase: Cycle Start
                 ; 0000 01C8 // SPI Clock Polarity: Low
                 ; 0000 01C9 // SPI Data Order: MSB First
                 ; 0000 01CA if (CLK <= 16) SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (1<<SPR0);
00025c e5e1      	LDI  R30,LOW(81)
                 ; 0000 01CB else   SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0);
                 _0x6D:
00025d b9ed      	OUT  0xD,R30
                 ; 0000 01CC SPSR=(0<<SPI2X);
00025e e0e0      	LDI  R30,LOW(0)
00025f b9ee      	OUT  0xE,R30
                 ; 0000 01CD 
                 ; 0000 01CE // TWI initialization
                 ; 0000 01CF // TWI disabled
                 ; 0000 01D0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000260 bfe6      	OUT  0x36,R30
                 ; 0000 01D1 
                 ; 0000 01D2 // Global enable interrupts
                 ; 0000 01D3 DISCH=1;
000261 9ac1      	SBI  0x18,1
                 ; 0000 01D4 SETBIT(TIFR,ICF1);
000262 d201      	RCALL SUBOPT_0x1A
                 ; 0000 01D5 #asm("cli")
000263 94f8      	cli
                 ; 0000 01D6 LCDinit();
000264 de17      	RCALL _LCDinit
                 ; 0000 01D7 delay_ms(100);
000265 e6a4      	LDI  R26,LOW(100)
000266 d125      	RCALL SUBOPT_0x2
                 ; 0000 01D8 lcd_printf(I1, 1);
000267 d18b      	RCALL SUBOPT_0xE
000268 d18d      	RCALL SUBOPT_0xF
                 ; 0000 01D9 strf_out("mA");
                 ; 0000 01DA LCD_LINE2;
000269 d193      	RCALL SUBOPT_0x10
                 ; 0000 01DB lcd_printf(I2,1);
                 ; 0000 01DC strf_out("mA");
                 ; 0000 01DD delay_ms(500);
00026a efa4      	LDI  R26,LOW(500)
00026b e0b1      	LDI  R27,HIGH(500)
00026c d282      	RCALL _delay_ms
                 ; 0000 01DE 
                 ; 0000 01DF LCD_CLR;
00026d d21c      	RCALL SUBOPT_0x1F
                 ; 0000 01E0 strf_out("TESTING");
                +
00026e e3a8     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
00026f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
000270 de59      	RCALL _strf_out
                 ; 0000 01E1 
                 ; 0000 01E2 C = testC();
000271 dea9      	RCALL _testC
                +
000272 83ec     +STD Y + 4 , R30
000273 83fd     +STD Y + 4 + 1 , R31
000274 836e     +STD Y + 4 + 2 , R22
000275 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 01E3 R = esr(C);
000276 d22f      	RCALL SUBOPT_0x22
000277 deeb      	RCALL _esr
000278 d1e7      	RCALL SUBOPT_0x18
                 ; 0000 01E4 CLRBIT(TCCR1B,CS11);
000279 b5ee      	IN   R30,0x2E
00027a 7fed      	ANDI R30,0xFD
00027b bdee      	OUT  0x2E,R30
                 ; 0000 01E5 
                 ; 0000 01E6 
                 ; 0000 01E7 
                 ; 0000 01E8 while (1)
                 _0x66:
                 ; 0000 01E9       {
                 ; 0000 01EA         LCD_CLR;
00027c d20d      	RCALL SUBOPT_0x1F
                 ; 0000 01EB         if ( C > 1000){
00027d d228      	RCALL SUBOPT_0x22
                +
00027e e0e0     +LDI R30 , LOW ( 0x447A0000 )
00027f e0f0     +LDI R31 , HIGH ( 0x447A0000 )
000280 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
000281 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
000282 d3ff      	RCALL __CMPF12
000283 f009      	BREQ PC+2
000284 f408      	BRCC PC+2
000285 c004      	RJMP _0x69
                 ; 0000 01EC             lcd_printf( C, 0);
000286 d1f0      	RCALL SUBOPT_0x1D
000287 d481      	RCALL __PUTPARD1
000288 e0a0      	LDI  R26,LOW(0)
000289 c003      	RJMP _0x6E
                 ; 0000 01ED         }
                 ; 0000 01EE         else{
                 _0x69:
                 ; 0000 01EF             lcd_printf(C, 2);
00028a d1ec      	RCALL SUBOPT_0x1D
00028b d47d      	RCALL __PUTPARD1
00028c e0a2      	LDI  R26,LOW(2)
                 _0x6E:
00028d de4d      	RCALL _lcd_printf
                 ; 0000 01F0         }
                 ; 0000 01F1         LCD_LINE2;
00028e eca0      	LDI  R26,LOW(192)
00028f dde1      	RCALL _lcd_com
                 ; 0000 01F2         strf_out("    uf");
                +
000290 e4a0     +LDI R26 , LOW ( 2 * _0x0 + ( 24 ) )
000291 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW2FN _0x0,24
000292 d218      	RCALL SUBOPT_0x23
                 ; 0000 01F3         delay_ms(1000);
                 ; 0000 01F4         LCD_CLR;
000293 d1f6      	RCALL SUBOPT_0x1F
                 ; 0000 01F5         lcd_printf(R, 3); //!!!!!!!!!!!!!
000294 d1cd      	RCALL SUBOPT_0x19
000295 d473      	RCALL __PUTPARD1
000296 e0a3      	LDI  R26,LOW(3)
000297 de43      	RCALL _lcd_printf
                 ; 0000 01F6         LCD_LINE2;
000298 eca0      	LDI  R26,LOW(192)
000299 ddd7      	RCALL _lcd_com
                 ; 0000 01F7         strf_out("    ohm");
                +
00029a e4a7     +LDI R26 , LOW ( 2 * _0x0 + ( 31 ) )
00029b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW2FN _0x0,31
00029c d20e      	RCALL SUBOPT_0x23
                 ; 0000 01F8         delay_ms(1000);
                 ; 0000 01F9       }
00029d cfde      	RJMP _0x66
                 ; 0000 01FA }
                 _0x6B:
00029e cfff      	RJMP _0x6B
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00029f d0f9      	RCALL SUBOPT_0x5
0002a0 9724      	SBIW R28,4
0002a1 d1ff      	RCALL SUBOPT_0x21
0002a2 e3ef      	LDI  R30,LOW(63)
0002a3 83eb      	STD  Y+3,R30
0002a4 d4b4      	RCALL __SAVELOCR2
0002a5 85eb      	LDD  R30,Y+11
0002a6 85fc      	LDD  R31,Y+11+1
0002a7 3fef      	CPI  R30,LOW(0xFFFF)
0002a8 efaf      	LDI  R26,HIGH(0xFFFF)
0002a9 07fa      	CPC  R31,R26
0002aa f429      	BRNE _0x200000D
0002ab d203      	RCALL SUBOPT_0x24
                +
0002ac e5a2     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
0002ad e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
0002ae d0c6      	RCALL _strcpyf
0002af c07a      	RJMP _0x20A0004
                 _0x200000D:
0002b0 3fef      	CPI  R30,LOW(0x7FFF)
0002b1 e7af      	LDI  R26,HIGH(0x7FFF)
0002b2 07fa      	CPC  R31,R26
0002b3 f429      	BRNE _0x200000C
0002b4 d1fa      	RCALL SUBOPT_0x24
                +
0002b5 e5a3     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
0002b6 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
0002b7 d0bd      	RCALL _strcpyf
0002b8 c071      	RJMP _0x20A0004
                 _0x200000C:
0002b9 85ac      	LDD  R26,Y+12
0002ba 23aa      	TST  R26
0002bb f432      	BRPL _0x200000F
0002bc d1f7      	RCALL SUBOPT_0x25
0002bd d23b      	RCALL __ANEGF1
0002be d1fa      	RCALL SUBOPT_0x26
0002bf d1fe      	RCALL SUBOPT_0x27
0002c0 e2ed      	LDI  R30,LOW(45)
0002c1 93ec      	ST   X,R30
                 _0x200000F:
0002c2 85a8      	LDD  R26,Y+8
0002c3 30a7      	CPI  R26,LOW(0x7)
0002c4 f010      	BRLO _0x2000010
0002c5 e0e6      	LDI  R30,LOW(6)
0002c6 87e8      	STD  Y+8,R30
                 _0x2000010:
0002c7 8518      	LDD  R17,Y+8
                 _0x2000011:
0002c8 2fe1      	MOV  R30,R17
0002c9 5011      	SUBI R17,1
0002ca 30e0      	CPI  R30,0
0002cb f021      	BREQ _0x2000013
0002cc d1f8      	RCALL SUBOPT_0x28
0002cd d1fc      	RCALL SUBOPT_0x29
0002ce d201      	RCALL SUBOPT_0x2A
0002cf cff8      	RJMP _0x2000011
                 _0x2000013:
0002d0 d204      	RCALL SUBOPT_0x2B
0002d1 d2cd      	RCALL __ADDF12
0002d2 d1e6      	RCALL SUBOPT_0x26
0002d3 e010      	LDI  R17,LOW(0)
                +
0002d4 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0002d5 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0002d6 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0002d7 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0002d8 d1f7      	RCALL SUBOPT_0x2A
                 _0x2000014:
0002d9 d1fb      	RCALL SUBOPT_0x2B
0002da d3a7      	RCALL __CMPF12
0002db f060      	BRLO _0x2000016
0002dc d1e8      	RCALL SUBOPT_0x28
0002dd d200      	RCALL SUBOPT_0x2C
0002de d1f1      	RCALL SUBOPT_0x2A
0002df 5f1f      	SUBI R17,-LOW(1)
0002e0 3217      	CPI  R17,39
0002e1 f028      	BRLO _0x2000017
0002e2 d1cc      	RCALL SUBOPT_0x24
                +
0002e3 e5a7     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
0002e4 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
0002e5 d08f      	RCALL _strcpyf
0002e6 c043      	RJMP _0x20A0004
                 _0x2000017:
0002e7 cff1      	RJMP _0x2000014
                 _0x2000016:
0002e8 3010      	CPI  R17,0
0002e9 f421      	BRNE _0x2000018
0002ea d1d3      	RCALL SUBOPT_0x27
0002eb e3e0      	LDI  R30,LOW(48)
0002ec 93ec      	ST   X,R30
0002ed c01e      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
0002ee 2fe1      	MOV  R30,R17
0002ef 5011      	SUBI R17,1
0002f0 30e0      	CPI  R30,0
0002f1 f0d1      	BREQ _0x200001C
0002f2 d1d2      	RCALL SUBOPT_0x28
0002f3 d1d6      	RCALL SUBOPT_0x29
                +
0002f4 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0002f5 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0002f6 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0002f7 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0002f8 d2a6      	RCALL __ADDF12
0002f9 01df      	MOVW R26,R30
0002fa 01cb      	MOVW R24,R22
0002fb d069      	RCALL _floor
0002fc d1d3      	RCALL SUBOPT_0x2A
0002fd d1d7      	RCALL SUBOPT_0x2B
0002fe d33e      	RCALL __DIVF21
0002ff d22c      	RCALL __CFD1U
000300 2f0e      	MOV  R16,R30
000301 d1bc      	RCALL SUBOPT_0x27
000302 d1e1      	RCALL SUBOPT_0x2D
000303 d1c1      	RCALL SUBOPT_0x28
000304 d3af      	RCALL __CWD1
000305 d25f      	RCALL __CDF1
000306 d2e8      	RCALL __MULF12
000307 d1e2      	RCALL SUBOPT_0x2E
000308 d40a      	RCALL __SWAPD12
000309 d28e      	RCALL __SUBF12
00030a d1ae      	RCALL SUBOPT_0x26
00030b cfe2      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
00030c 85e8      	LDD  R30,Y+8
00030d 30e0      	CPI  R30,0
00030e f0b9      	BREQ _0x20A0003
00030f d1ae      	RCALL SUBOPT_0x27
000310 e2ee      	LDI  R30,LOW(46)
000311 93ec      	ST   X,R30
                 _0x200001E:
000312 85e8      	LDD  R30,Y+8
000313 50e1      	SUBI R30,LOW(1)
000314 87e8      	STD  Y+8,R30
000315 5fef      	SUBI R30,-LOW(1)
000316 f079      	BREQ _0x2000020
000317 d1d2      	RCALL SUBOPT_0x2E
000318 d1c5      	RCALL SUBOPT_0x2C
000319 d19f      	RCALL SUBOPT_0x26
00031a d199      	RCALL SUBOPT_0x25
00031b d210      	RCALL __CFD1U
00031c 2f0e      	MOV  R16,R30
00031d d1a0      	RCALL SUBOPT_0x27
00031e d1c5      	RCALL SUBOPT_0x2D
00031f d1ca      	RCALL SUBOPT_0x2E
000320 d393      	RCALL __CWD1
000321 d243      	RCALL __CDF1
000322 d3f0      	RCALL __SWAPD12
000323 d274      	RCALL __SUBF12
000324 d194      	RCALL SUBOPT_0x26
000325 cfec      	RJMP _0x200001E
                 _0x2000020:
                 _0x20A0003:
000326 81ae      	LDD  R26,Y+6
000327 81bf      	LDD  R27,Y+6+1
000328 e0e0      	LDI  R30,LOW(0)
000329 93ec      	ST   X,R30
                 _0x20A0004:
00032a d431      	RCALL __LOADLOCR2
00032b 962d      	ADIW R28,13
00032c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
                 ; .FSTART _spi
00032d 93aa      	ST   -Y,R26
00032e 81e8      	LD   R30,Y
00032f b9ef      	OUT  0xF,R30
                 _0x2020003:
000330 9b77      	SBIS 0xE,7
000331 cffe      	RJMP _0x2020003
000332 b1ef      	IN   R30,0xF
                 _0x20A0002:
000333 9621      	ADIW R28,1
000334 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000335 d3d8      	RCALL __PUTPARD2
000336 817b         ldd  r23,y+3
000337 816a         ldd  r22,y+2
000338 81f9         ldd  r31,y+1
000339 81e8         ld   r30,y
00033a fb77         bst  r23,7
00033b 0f77         lsl  r23
00033c fd67         sbrc r22,7
00033d 6071         sbr  r23,1
00033e 2f97         mov  r25,r23
00033f 579e         subi r25,0x7e
000340 f081         breq __ftrunc0
000341 f078         brcs __ftrunc0
000342 3198         cpi  r25,24
000343 f490         brsh __ftrunc1
000344 27aa         clr  r26
000345 27bb         clr  r27
000346 2788         clr  r24
                 __ftrunc2:
000347 9408         sec
000348 9587         ror  r24
000349 95b7         ror  r27
00034a 95a7         ror  r26
00034b 959a         dec  r25
00034c f7d1         brne __ftrunc2
00034d 23ea         and  r30,r26
00034e 23fb         and  r31,r27
00034f 2368         and  r22,r24
000350 c005         rjmp __ftrunc1
                 __ftrunc0:
000351 94e8         clt
000352 2777         clr  r23
000353 27ee         clr  r30
000354 27ff         clr  r31
000355 2766         clr  r22
                 __ftrunc1:
000356 776f         cbr  r22,0x80
000357 9576         lsr  r23
000358 f408         brcc __ftrunc3
000359 6860         sbr  r22,0x80
                 __ftrunc3:
00035a f977         bld  r23,7
00035b 91a9         ld   r26,y+
00035c 91b9         ld   r27,y+
00035d 9189         ld   r24,y+
00035e 9199         ld   r25,y+
00035f 17ea         cp   r30,r26
000360 07fb         cpc  r31,r27
000361 0768         cpc  r22,r24
000362 0779         cpc  r23,r25
000363 fb97         bst  r25,7
000364 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000365 d3a8      	RCALL __PUTPARD2
000366 d398      	RCALL __GETD2S0
000367 dfcd      	RCALL _ftrunc
000368 d0f7      	RCALL SUBOPT_0x18
000369 f411          brne __floor1
                 __floor0:
00036a d0f7      	RCALL SUBOPT_0x19
00036b c007      	RJMP _0x20A0001
                 __floor1:
00036c f7ee          brtc __floor0
00036d d0f4      	RCALL SUBOPT_0x19
                +
00036e e0a0     +LDI R26 , LOW ( 0x3F800000 )
00036f e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000370 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000371 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000372 d225      	RCALL __SUBF12
                 _0x20A0001:
000373 9624      	ADIW R28,4
000374 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000375 d023      	RCALL SUBOPT_0x5
000376 91e9          ld   r30,y+
000377 91f9          ld   r31,y+
000378 91a9          ld   r26,y+
000379 91b9          ld   r27,y+
00037a 01cd          movw r24,r26
                 strcpyf0:
00037b 9005      	lpm  r0,z+
00037c 920d          st   x+,r0
00037d 2000          tst  r0
00037e f7e1          brne strcpyf0
00037f 01fc          movw r30,r24
000380 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _t:
000161           	.BYTE 0x4
                 _T1:
000165           	.BYTE 0x4
                 _T2:
000169           	.BYTE 0x4
                 
                 	.ESEG
                 _I1:
000000 00
000001 00
000002 28
000003 41        	.DB  0x0,0x0,0x28,0x41
                 _I2:
000004 9a
000005 99
000006 e2
000007 42        	.DB  0x9A,0x99,0xE2,0x42
                 
                 	.DSEG
                 __seed_G100:
00016d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000381 83e8      	ST   Y,R30
000382 81a8      	LD   R26,Y
000383 dfa9      	RCALL _spi
000384 9ac2      	SBI  0x18,2
000385 98c2      	CBI  0x18,2
000386 81e8      	LD   R30,Y
000387 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000388 dfa4      	RCALL _spi
000389 9ac2      	SBI  0x18,2
00038a 98c2      	CBI  0x18,2
00038b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00038c e0b0      	LDI  R27,0
00038d c161      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00038e e3a0      	LDI  R26,LOW(48)
00038f dcd4      	RCALL _LCDcom
                +
000390 ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
000391 958a     +DEC R24
000392 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
000393 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000394 dccf      	RCALL _LCDcom
000395 e8a0      	LDI  R26,LOW(128)
000396 dccd      	RCALL _LCDcom
000397 e0a0      	LDI  R26,LOW(0)
000398 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000399 93ba      	ST   -Y,R27
00039a 93aa      	ST   -Y,R26
00039b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00039c 98c0      	CBI  0x18,0
00039d 9897      	CBI  0x12,7
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00039f e0a1      	LDI  R26,LOW(1)
0003a0 dcd0      	RCALL _lcd_com
0003a1 e8a0      	LDI  R26,LOW(128)
0003a2 ccce      	RJMP _lcd_com
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003a3 b5ee      	IN   R30,0x2E
0003a4 60e2      	ORI  R30,2
0003a5 bdee      	OUT  0x2E,R30
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
0003a7 9ac1      	SBI  0x18,1
0003a8 eea8      	LDI  R26,LOW(1000)
0003a9 e0b3      	LDI  R27,HIGH(1000)
0003aa c144      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0xA:
0003ab 98c1      	CBI  0x18,1
0003ac e0e0      	LDI  R30,LOW(0)
0003ad e0f0      	LDI  R31,HIGH(0)
0003ae bdfd      	OUT  0x2C+1,R31
0003af bdec      	OUT  0x2C,R30
0003b0 b7e9      	IN   R30,0x39
0003b1 7def      	ANDI R30,0xDF
0003b2 bfe9      	OUT  0x39,R30
0003b3 b1e7      	IN   R30,0x7
0003b4 7fe0      	ANDI R30,LOW(0xF0)
0003b5 b9e7      	OUT  0x7,R30
0003b6 b7e8      	IN   R30,0x38
0003b7 62e0      	ORI  R30,0x20
0003b8 bfe8      	OUT  0x38,R30
0003b9 b7e9      	IN   R30,0x39
0003ba 62e0      	ORI  R30,0x20
0003bb bfe9      	OUT  0x39,R30
0003bc e0e0      	LDI  R30,LOW(0)
0003bd 93e0 0165 	STS  _T1,R30
0003bf 93e0 0166 	STS  _T1+1,R30
0003c1 93e0 0167 	STS  _T1+2,R30
0003c3 93e0 0168 	STS  _T1+3,R30
0003c5 93e0 0169 	STS  _T2,R30
0003c7 93e0 016a 	STS  _T2+1,R30
0003c9 93e0 016b 	STS  _T2+2,R30
0003cb 93e0 016c 	STS  _T2+3,R30
0003cd 93e0 0161 	STS  _t,R30
0003cf 93e0 0162 	STS  _t+1,R30
0003d1 93e0 0163 	STS  _t+2,R30
0003d3 93e0 0164 	STS  _t+3,R30
0003d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:47 WORDS
                 SUBOPT_0xB:
0003d6 91e0 0169 	LDS  R30,_T2
0003d8 91f0 016a 	LDS  R31,_T2+1
0003da 9160 016b 	LDS  R22,_T2+2
0003dc 9170 016c 	LDS  R23,_T2+3
0003de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xC:
0003df dff6      	RCALL SUBOPT_0xB
0003e0 d182      	RCALL __CDF1U
0003e1 01df      	MOVW R26,R30
0003e2 01cb      	MOVW R24,R22
                +
0003e3 e0e0     +LDI R30 , LOW ( 0x40000000 )
0003e4 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0003e5 e060     +LDI R22 , BYTE3 ( 0x40000000 )
0003e6 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0003e7 d255      	RCALL __DIVF21
                +
0003e8 e0a0     +LDI R26 , LOW ( 0x449E2000 )
0003e9 e2b0     +LDI R27 , HIGH ( 0x449E2000 )
0003ea e98e     +LDI R24 , BYTE3 ( 0x449E2000 )
0003eb e494     +LDI R25 , BYTE4 ( 0x449E2000 )
                 	__GETD2N 0x449E2000
0003ec d250      	RCALL __DIVF21
0003ed d311      	RCALL __GETD2S0
0003ee d200      	RCALL __MULF12
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0003f0 e0a4      	LDI  R26,LOW(_I2)
0003f1 e0b0      	LDI  R27,HIGH(_I2)
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0003f3 e0a0      	LDI  R26,LOW(_I1)
0003f4 e0b0      	LDI  R27,HIGH(_I1)
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xF:
0003f6 d329      	RCALL __EEPROMRDD
0003f7 d311      	RCALL __PUTPARD1
0003f8 e0a1      	LDI  R26,LOW(1)
0003f9 dce1      	RCALL _lcd_printf
                +
0003fa e2af     +LDI R26 , LOW ( 2 * _0x0 + ( 7 ) )
0003fb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 7 ) )
                 	__POINTW2FN _0x0,7
0003fc cccd      	RJMP _strf_out
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0003fd eca0      	LDI  R26,LOW(192)
0003fe dc72      	RCALL _lcd_com
0003ff dff0      	RCALL SUBOPT_0xD
000400 cff5      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
000401 9724      	SBIW R28,4
000402 e0e0      	LDI  R30,LOW(0)
000403 83e8      	ST   Y,R30
000404 83e9      	STD  Y+1,R30
000405 83ea      	STD  Y+2,R30
000406 83eb      	STD  Y+3,R30
000407 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000408 9838      	CBI  0x7,0
000409 b7e8      	IN   R30,0x38
00040a 62e0      	ORI  R30,0x20
00040b bfe8      	OUT  0x38,R30
00040c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x13:
00040d e0e0      	LDI  R30,LOW(0)
00040e 93e0 0161 	STS  _t,R30
000410 93e0 0162 	STS  _t+1,R30
000412 93e0 0163 	STS  _t+2,R30
000414 93e0 0164 	STS  _t+3,R30
000416 e0e0      	LDI  R30,LOW(0)
000417 e0f0      	LDI  R31,HIGH(0)
000418 bdfd      	OUT  0x2C+1,R31
000419 bdec      	OUT  0x2C,R30
00041a 93e0 0165 	STS  _T1,R30
00041c 93e0 0166 	STS  _T1+1,R30
00041e 93e0 0167 	STS  _T1+2,R30
000420 93e0 0168 	STS  _T1+3,R30
000422 93e0 0169 	STS  _T2,R30
000424 93e0 016a 	STS  _T2+1,R30
000426 93e0 016b 	STS  _T2+2,R30
000428 93e0 016c 	STS  _T2+3,R30
00042a 98c1      	CBI  0x18,1
00042b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
00042c 91e0 0165 	LDS  R30,_T1
00042e 91f0 0166 	LDS  R31,_T1+1
000430 9160 0167 	LDS  R22,_T1+2
000432 9170 0168 	LDS  R23,_T1+3
000434 d320      	RCALL __CPD10
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
000436 91a0 0161 	LDS  R26,_t
000438 91b0 0162 	LDS  R27,_t+1
00043a 9180 0163 	LDS  R24,_t+2
00043c 9190 0164 	LDS  R25,_t+3
00043e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x16:
00043f 91e0 0165 	LDS  R30,_T1
000441 91f0 0166 	LDS  R31,_T1+1
000443 9160 0167 	LDS  R22,_T1+2
000445 9170 0168 	LDS  R23,_T1+3
000447 d267      	RCALL __LSRD1
000448 91a0 0169 	LDS  R26,_T2
00044a 91b0 016a 	LDS  R27,_T2+1
00044c 9180 016b 	LDS  R24,_T2+2
00044e 9190 016c 	LDS  R25,_T2+3
000450 d268      	RCALL __LTD12U
000451 2fae      	MOV  R26,R30
000452 df83      	RCALL SUBOPT_0xB
000453 d275      	RCALL __LNEGD1
000454 2bea      	OR   R30,R26
000455 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000456 df7f      	RCALL SUBOPT_0xB
000457 d10b      	RCALL __CDF1U
000458 01df      	MOVW R26,R30
000459 01cb      	MOVW R24,R22
                +
00045a e0e0     +LDI R30 , LOW ( 0x40000000 )
00045b e0f0     +LDI R31 , HIGH ( 0x40000000 )
00045c e060     +LDI R22 , BYTE3 ( 0x40000000 )
00045d e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
00045e d1de      	RCALL __DIVF21
00045f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
000460 d2a3      	RCALL __PUTD1S0
000461 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x19:
000462 d297      	RCALL __GETD1S0
000463 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
000464 b7e8      	IN   R30,0x38
000465 62e0      	ORI  R30,0x20
000466 bfe8      	OUT  0x38,R30
000467 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
000468 e0e0      	LDI  R30,LOW(0)
000469 e0f0      	LDI  R31,HIGH(0)
00046a bdfd      	OUT  0x2C+1,R31
00046b bdec      	OUT  0x2C,R30
00046c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1C:
00046d e0e0      	LDI  R30,LOW(0)
00046e 93e0 0161 	STS  _t,R30
000470 93e0 0162 	STS  _t+1,R30
000472 93e0 0163 	STS  _t+2,R30
000474 93e0 0164 	STS  _t+3,R30
000476 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
                +
000477 81ec     +LDD R30 , Y + 4
000478 81fd     +LDD R31 , Y + 4 + 1
000479 816e     +LDD R22 , Y + 4 + 2
00047a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00047b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1E:
00047c 920a      	ST   -Y,R0
00047d 921a      	ST   -Y,R1
00047e 92fa      	ST   -Y,R15
00047f 936a      	ST   -Y,R22
000480 937a      	ST   -Y,R23
000481 938a      	ST   -Y,R24
000482 939a      	ST   -Y,R25
000483 93aa      	ST   -Y,R26
000484 93ba      	ST   -Y,R27
000485 93ea      	ST   -Y,R30
000486 93fa      	ST   -Y,R31
000487 b7ef      	IN   R30,SREG
000488 93ea      	ST   -Y,R30
000489 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
00048a e0a1      	LDI  R26,LOW(1)
00048b cbe5      	RJMP _lcd_com
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x20:
00048c 91e0 0161 	LDS  R30,_t
00048e 91f0 0162 	LDS  R31,_t+1
000490 9160 0163 	LDS  R22,_t+2
000492 9170 0164 	LDS  R23,_t+3
                +
000494 efaf     +LDI R26 , LOW ( 0xFFFF )
000495 efbf     +LDI R27 , HIGH ( 0xFFFF )
000496 e080     +LDI R24 , BYTE3 ( 0xFFFF )
000497 e090     +LDI R25 , BYTE4 ( 0xFFFF )
                 	__GETD2N 0xFFFF
000498 d237      	RCALL __MULD12U
000499 01df      	MOVW R26,R30
00049a 01cb      	MOVW R24,R22
00049b b5e6      	IN   R30,0x26
00049c b5f7      	IN   R31,0x26+1
00049d 2766      	CLR  R22
00049e 2777      	CLR  R23
00049f d202      	RCALL __ADDD12
0004a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
0004a1 e0e0      	LDI  R30,LOW(0)
0004a2 83e8      	ST   Y,R30
0004a3 83e9      	STD  Y+1,R30
0004a4 83ea      	STD  Y+2,R30
0004a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
0004a6 81ac     +LDD R26 , Y + 4
0004a7 81bd     +LDD R27 , Y + 4 + 1
0004a8 818e     +LDD R24 , Y + 4 + 2
0004a9 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
0004ab dc1e      	RCALL _strf_out
0004ac eea8      	LDI  R26,LOW(1000)
0004ad e0b3      	LDI  R27,HIGH(1000)
0004ae c040      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x24:
0004af 81ee      	LDD  R30,Y+6
0004b0 81ff      	LDD  R31,Y+6+1
0004b1 93fa      	ST   -Y,R31
0004b2 93ea      	ST   -Y,R30
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
                +
0004b4 85e9     +LDD R30 , Y + 9
0004b5 85fa     +LDD R31 , Y + 9 + 1
0004b6 856b     +LDD R22 , Y + 9 + 2
0004b7 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0004b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x26:
                +
0004b9 87e9     +STD Y + 9 , R30
0004ba 87fa     +STD Y + 9 + 1 , R31
0004bb 876b     +STD Y + 9 + 2 , R22
0004bc 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x27:
0004be 81ae      	LDD  R26,Y+6
0004bf 81bf      	LDD  R27,Y+6+1
0004c0 9611      	ADIW R26,1
0004c1 83ae      	STD  Y+6,R26
0004c2 83bf      	STD  Y+6+1,R27
0004c3 9711      	SBIW R26,1
0004c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x28:
                +
0004c5 81aa     +LDD R26 , Y + 2
0004c6 81bb     +LDD R27 , Y + 2 + 1
0004c7 818c     +LDD R24 , Y + 2 + 2
0004c8 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0004c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
                +
0004ca eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0004cb ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0004cc ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0004cd e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0004ce d120      	RCALL __MULF12
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2A:
                +
0004d0 83ea     +STD Y + 2 , R30
0004d1 83fb     +STD Y + 2 + 1 , R31
0004d2 836c     +STD Y + 2 + 2 , R22
0004d3 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0004d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2B:
                +
0004d5 81ea     +LDD R30 , Y + 2
0004d6 81fb     +LDD R31 , Y + 2 + 1
0004d7 816c     +LDD R22 , Y + 2 + 2
0004d8 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0004d9 85a9     +LDD R26 , Y + 9
0004da 85ba     +LDD R27 , Y + 9 + 1
0004db 858b     +LDD R24 , Y + 9 + 2
0004dc 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0004dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
                +
0004de e0e0     +LDI R30 , LOW ( 0x41200000 )
0004df e0f0     +LDI R31 , HIGH ( 0x41200000 )
0004e0 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0004e1 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0004e2 d10c      	RCALL __MULF12
0004e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
0004e4 2fe0      	MOV  R30,R16
0004e5 5de0      	SUBI R30,-LOW(48)
0004e6 93ec      	ST   X,R30
0004e7 2fe0      	MOV  R30,R16
0004e8 e0f0      	LDI  R31,0
0004e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2E:
                +
0004ea 85a9     +LDD R26 , Y + 9
0004eb 85ba     +LDD R27 , Y + 9 + 1
0004ec 858b     +LDD R24 , Y + 9 + 2
0004ed 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0004ee 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004ef 9610      	adiw r26,0
0004f0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004f1 ea80     +LDI R24 , LOW ( 0xFA0 )
0004f2 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0004f3 9701     +SBIW R24 , 1
0004f4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0004f5 95a8      	wdr
0004f6 9711      	sbiw r26,1
0004f7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004f8 9508      	ret
                 
                 __ANEGF1:
0004f9 9730      	SBIW R30,0
0004fa 4060      	SBCI R22,0
0004fb 4070      	SBCI R23,0
0004fc f009      	BREQ __ANEGF10
0004fd 5870      	SUBI R23,0x80
                 __ANEGF10:
0004fe 9508      	RET
                 
                 __ROUND_REPACK:
0004ff 2355      	TST  R21
000500 f442      	BRPL __REPACK
000501 3850      	CPI  R21,0x80
000502 f411      	BRNE __ROUND_REPACK0
000503 ffe0      	SBRS R30,0
000504 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000505 9631      	ADIW R30,1
000506 1f69      	ADC  R22,R25
000507 1f79      	ADC  R23,R25
000508 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000509 e850      	LDI  R21,0x80
00050a 2757      	EOR  R21,R23
00050b f411      	BRNE __REPACK0
00050c 935f      	PUSH R21
00050d c0cf      	RJMP __ZERORES
                 __REPACK0:
00050e 3f5f      	CPI  R21,0xFF
00050f f031      	BREQ __REPACK1
000510 0f66      	LSL  R22
000511 0c00      	LSL  R0
000512 9557      	ROR  R21
000513 9567      	ROR  R22
000514 2f75      	MOV  R23,R21
000515 9508      	RET
                 __REPACK1:
000516 935f      	PUSH R21
000517 2000      	TST  R0
000518 f00a      	BRMI __REPACK2
000519 c0cf      	RJMP __MAXRES
                 __REPACK2:
00051a c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00051b e850      	LDI  R21,0x80
00051c 2e19      	MOV  R1,R25
00051d 2215      	AND  R1,R21
00051e 0f88      	LSL  R24
00051f 1f99      	ROL  R25
000520 2795      	EOR  R25,R21
000521 0f55      	LSL  R21
000522 9587      	ROR  R24
                 
                 __UNPACK1:
000523 e850      	LDI  R21,0x80
000524 2e07      	MOV  R0,R23
000525 2205      	AND  R0,R21
000526 0f66      	LSL  R22
000527 1f77      	ROL  R23
000528 2775      	EOR  R23,R21
000529 0f55      	LSL  R21
00052a 9567      	ROR  R22
00052b 9508      	RET
                 
                 __CFD1U:
00052c 9468      	SET
00052d c001      	RJMP __CFD1U0
                 __CFD1:
00052e 94e8      	CLT
                 __CFD1U0:
00052f 935f      	PUSH R21
000530 dff2      	RCALL __UNPACK1
000531 3870      	CPI  R23,0x80
000532 f018      	BRLO __CFD10
000533 3f7f      	CPI  R23,0xFF
000534 f408      	BRCC __CFD10
000535 c0a7      	RJMP __ZERORES
                 __CFD10:
000536 e156      	LDI  R21,22
000537 1b57      	SUB  R21,R23
000538 f4aa      	BRPL __CFD11
000539 9551      	NEG  R21
00053a 3058      	CPI  R21,8
00053b f40e      	BRTC __CFD19
00053c 3059      	CPI  R21,9
                 __CFD19:
00053d f030      	BRLO __CFD17
00053e efef      	SER  R30
00053f efff      	SER  R31
000540 ef6f      	SER  R22
000541 e77f      	LDI  R23,0x7F
000542 f977      	BLD  R23,7
000543 c01a      	RJMP __CFD15
                 __CFD17:
000544 2777      	CLR  R23
000545 2355      	TST  R21
000546 f0b9      	BREQ __CFD15
                 __CFD18:
000547 0fee      	LSL  R30
000548 1fff      	ROL  R31
000549 1f66      	ROL  R22
00054a 1f77      	ROL  R23
00054b 955a      	DEC  R21
00054c f7d1      	BRNE __CFD18
00054d c010      	RJMP __CFD15
                 __CFD11:
00054e 2777      	CLR  R23
                 __CFD12:
00054f 3058      	CPI  R21,8
000550 f028      	BRLO __CFD13
000551 2fef      	MOV  R30,R31
000552 2ff6      	MOV  R31,R22
000553 2f67      	MOV  R22,R23
000554 5058      	SUBI R21,8
000555 cff9      	RJMP __CFD12
                 __CFD13:
000556 2355      	TST  R21
000557 f031      	BREQ __CFD15
                 __CFD14:
000558 9576      	LSR  R23
000559 9567      	ROR  R22
00055a 95f7      	ROR  R31
00055b 95e7      	ROR  R30
00055c 955a      	DEC  R21
00055d f7d1      	BRNE __CFD14
                 __CFD15:
00055e 2000      	TST  R0
00055f f40a      	BRPL __CFD16
000560 d146      	RCALL __ANEGD1
                 __CFD16:
000561 915f      	POP  R21
000562 9508      	RET
                 
                 __CDF1U:
000563 9468      	SET
000564 c001      	RJMP __CDF1U0
                 __CDF1:
000565 94e8      	CLT
                 __CDF1U0:
000566 9730      	SBIW R30,0
000567 4060      	SBCI R22,0
000568 4070      	SBCI R23,0
000569 f0b1      	BREQ __CDF10
00056a 2400      	CLR  R0
00056b f026      	BRTS __CDF11
00056c 2377      	TST  R23
00056d f412      	BRPL __CDF11
00056e 9400      	COM  R0
00056f d137      	RCALL __ANEGD1
                 __CDF11:
000570 2e17      	MOV  R1,R23
000571 e17e      	LDI  R23,30
000572 2011      	TST  R1
                 __CDF12:
000573 f032      	BRMI __CDF13
000574 957a      	DEC  R23
000575 0fee      	LSL  R30
000576 1fff      	ROL  R31
000577 1f66      	ROL  R22
000578 1c11      	ROL  R1
000579 cff9      	RJMP __CDF12
                 __CDF13:
00057a 2fef      	MOV  R30,R31
00057b 2ff6      	MOV  R31,R22
00057c 2d61      	MOV  R22,R1
00057d 935f      	PUSH R21
00057e df8a      	RCALL __REPACK
00057f 915f      	POP  R21
                 __CDF10:
000580 9508      	RET
                 
                 __SWAPACC:
000581 934f      	PUSH R20
000582 01af      	MOVW R20,R30
000583 01fd      	MOVW R30,R26
000584 01da      	MOVW R26,R20
000585 01ab      	MOVW R20,R22
000586 01bc      	MOVW R22,R24
000587 01ca      	MOVW R24,R20
000588 2d40      	MOV  R20,R0
000589 2c01      	MOV  R0,R1
00058a 2e14      	MOV  R1,R20
00058b 914f      	POP  R20
00058c 9508      	RET
                 
                 __UADD12:
00058d 0fea      	ADD  R30,R26
00058e 1ffb      	ADC  R31,R27
00058f 1f68      	ADC  R22,R24
000590 9508      	RET
                 
                 __NEGMAN1:
000591 95e0      	COM  R30
000592 95f0      	COM  R31
000593 9560      	COM  R22
000594 5fef      	SUBI R30,-1
000595 4fff      	SBCI R31,-1
000596 4f6f      	SBCI R22,-1
000597 9508      	RET
                 
                 __SUBF12:
000598 935f      	PUSH R21
000599 df81      	RCALL __UNPACK
00059a 3890      	CPI  R25,0x80
00059b f171      	BREQ __ADDF129
00059c e850      	LDI  R21,0x80
00059d 2615      	EOR  R1,R21
                 
00059e c004      	RJMP __ADDF120
                 
                 __ADDF12:
00059f 935f      	PUSH R21
0005a0 df7a      	RCALL __UNPACK
0005a1 3890      	CPI  R25,0x80
0005a2 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005a3 3870      	CPI  R23,0x80
0005a4 f121      	BREQ __ADDF128
                 __ADDF121:
0005a5 2f57      	MOV  R21,R23
0005a6 1b59      	SUB  R21,R25
0005a7 f12b      	BRVS __ADDF1211
0005a8 f412      	BRPL __ADDF122
0005a9 dfd7      	RCALL __SWAPACC
0005aa cffa      	RJMP __ADDF121
                 __ADDF122:
0005ab 3158      	CPI  R21,24
0005ac f018      	BRLO __ADDF123
0005ad 27aa      	CLR  R26
0005ae 27bb      	CLR  R27
0005af 2788      	CLR  R24
                 __ADDF123:
0005b0 3058      	CPI  R21,8
0005b1 f028      	BRLO __ADDF124
0005b2 2fab      	MOV  R26,R27
0005b3 2fb8      	MOV  R27,R24
0005b4 2788      	CLR  R24
0005b5 5058      	SUBI R21,8
0005b6 cff9      	RJMP __ADDF123
                 __ADDF124:
0005b7 2355      	TST  R21
0005b8 f029      	BREQ __ADDF126
                 __ADDF125:
0005b9 9586      	LSR  R24
0005ba 95b7      	ROR  R27
0005bb 95a7      	ROR  R26
0005bc 955a      	DEC  R21
0005bd f7d9      	BRNE __ADDF125
                 __ADDF126:
0005be 2d50      	MOV  R21,R0
0005bf 2551      	EOR  R21,R1
0005c0 f072      	BRMI __ADDF127
0005c1 dfcb      	RCALL __UADD12
0005c2 f438      	BRCC __ADDF129
0005c3 9567      	ROR  R22
0005c4 95f7      	ROR  R31
0005c5 95e7      	ROR  R30
0005c6 9573      	INC  R23
0005c7 f413      	BRVC __ADDF129
0005c8 c020      	RJMP __MAXRES
                 __ADDF128:
0005c9 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005ca df3e      	RCALL __REPACK
0005cb 915f      	POP  R21
0005cc 9508      	RET
                 __ADDF1211:
0005cd f7d8      	BRCC __ADDF128
0005ce cffb      	RJMP __ADDF129
                 __ADDF127:
0005cf 1bea      	SUB  R30,R26
0005d0 0bfb      	SBC  R31,R27
0005d1 0b68      	SBC  R22,R24
0005d2 f051      	BREQ __ZERORES
0005d3 f410      	BRCC __ADDF1210
0005d4 9400      	COM  R0
0005d5 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005d6 2366      	TST  R22
0005d7 f392      	BRMI __ADDF129
0005d8 0fee      	LSL  R30
0005d9 1fff      	ROL  R31
0005da 1f66      	ROL  R22
0005db 957a      	DEC  R23
0005dc f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005dd 27ee      	CLR  R30
0005de 27ff      	CLR  R31
0005df 2766      	CLR  R22
0005e0 2777      	CLR  R23
0005e1 915f      	POP  R21
0005e2 9508      	RET
                 
                 __MINRES:
0005e3 efef      	SER  R30
0005e4 efff      	SER  R31
0005e5 e76f      	LDI  R22,0x7F
0005e6 ef7f      	SER  R23
0005e7 915f      	POP  R21
0005e8 9508      	RET
                 
                 __MAXRES:
0005e9 efef      	SER  R30
0005ea efff      	SER  R31
0005eb e76f      	LDI  R22,0x7F
0005ec e77f      	LDI  R23,0x7F
0005ed 915f      	POP  R21
0005ee 9508      	RET
                 
                 __MULF12:
0005ef 935f      	PUSH R21
0005f0 df2a      	RCALL __UNPACK
0005f1 3870      	CPI  R23,0x80
0005f2 f351      	BREQ __ZERORES
0005f3 3890      	CPI  R25,0x80
0005f4 f341      	BREQ __ZERORES
0005f5 2401      	EOR  R0,R1
0005f6 9408      	SEC
0005f7 1f79      	ADC  R23,R25
0005f8 f423      	BRVC __MULF124
0005f9 f31c      	BRLT __ZERORES
                 __MULF125:
0005fa 2000      	TST  R0
0005fb f33a      	BRMI __MINRES
0005fc cfec      	RJMP __MAXRES
                 __MULF124:
0005fd 920f      	PUSH R0
0005fe 931f      	PUSH R17
0005ff 932f      	PUSH R18
000600 933f      	PUSH R19
000601 934f      	PUSH R20
000602 2711      	CLR  R17
000603 2722      	CLR  R18
000604 2799      	CLR  R25
000605 9f68      	MUL  R22,R24
000606 01a0      	MOVW R20,R0
000607 9f8f      	MUL  R24,R31
000608 2d30      	MOV  R19,R0
000609 0d41      	ADD  R20,R1
00060a 1f59      	ADC  R21,R25
00060b 9f6b      	MUL  R22,R27
00060c 0d30      	ADD  R19,R0
00060d 1d41      	ADC  R20,R1
00060e 1f59      	ADC  R21,R25
00060f 9f8e      	MUL  R24,R30
000610 d027      	RCALL __MULF126
000611 9fbf      	MUL  R27,R31
000612 d025      	RCALL __MULF126
000613 9f6a      	MUL  R22,R26
000614 d023      	RCALL __MULF126
000615 9fbe      	MUL  R27,R30
000616 d01d      	RCALL __MULF127
000617 9faf      	MUL  R26,R31
000618 d01b      	RCALL __MULF127
000619 9fae      	MUL  R26,R30
00061a 0d11      	ADD  R17,R1
00061b 1f29      	ADC  R18,R25
00061c 1f39      	ADC  R19,R25
00061d 1f49      	ADC  R20,R25
00061e 1f59      	ADC  R21,R25
00061f 2fe3      	MOV  R30,R19
000620 2ff4      	MOV  R31,R20
000621 2f65      	MOV  R22,R21
000622 2f52      	MOV  R21,R18
000623 914f      	POP  R20
000624 913f      	POP  R19
000625 912f      	POP  R18
000626 911f      	POP  R17
000627 900f      	POP  R0
000628 2366      	TST  R22
000629 f02a      	BRMI __MULF122
00062a 0f55      	LSL  R21
00062b 1fee      	ROL  R30
00062c 1fff      	ROL  R31
00062d 1f66      	ROL  R22
00062e c002      	RJMP __MULF123
                 __MULF122:
00062f 9573      	INC  R23
000630 f24b      	BRVS __MULF125
                 __MULF123:
000631 decd      	RCALL __ROUND_REPACK
000632 915f      	POP  R21
000633 9508      	RET
                 
                 __MULF127:
000634 0d10      	ADD  R17,R0
000635 1d21      	ADC  R18,R1
000636 1f39      	ADC  R19,R25
000637 c002      	RJMP __MULF128
                 __MULF126:
000638 0d20      	ADD  R18,R0
000639 1d31      	ADC  R19,R1
                 __MULF128:
00063a 1f49      	ADC  R20,R25
00063b 1f59      	ADC  R21,R25
00063c 9508      	RET
                 
                 __DIVF21:
00063d 935f      	PUSH R21
00063e dedc      	RCALL __UNPACK
00063f 3870      	CPI  R23,0x80
000640 f421      	BRNE __DIVF210
000641 2011      	TST  R1
                 __DIVF211:
000642 f40a      	BRPL __DIVF219
000643 cf9f      	RJMP __MINRES
                 __DIVF219:
000644 cfa4      	RJMP __MAXRES
                 __DIVF210:
000645 3890      	CPI  R25,0x80
000646 f409      	BRNE __DIVF218
                 __DIVF217:
000647 cf95      	RJMP __ZERORES
                 __DIVF218:
000648 2401      	EOR  R0,R1
000649 9408      	SEC
00064a 0b97      	SBC  R25,R23
00064b f41b      	BRVC __DIVF216
00064c f3d4      	BRLT __DIVF217
00064d 2000      	TST  R0
00064e cff3      	RJMP __DIVF211
                 __DIVF216:
00064f 2f79      	MOV  R23,R25
000650 931f      	PUSH R17
000651 932f      	PUSH R18
000652 933f      	PUSH R19
000653 934f      	PUSH R20
000654 2411      	CLR  R1
000655 2711      	CLR  R17
000656 2722      	CLR  R18
000657 2733      	CLR  R19
000658 2744      	CLR  R20
000659 2755      	CLR  R21
00065a e290      	LDI  R25,32
                 __DIVF212:
00065b 17ae      	CP   R26,R30
00065c 07bf      	CPC  R27,R31
00065d 0786      	CPC  R24,R22
00065e 0741      	CPC  R20,R17
00065f f030      	BRLO __DIVF213
000660 1bae      	SUB  R26,R30
000661 0bbf      	SBC  R27,R31
000662 0b86      	SBC  R24,R22
000663 0b41      	SBC  R20,R17
000664 9408      	SEC
000665 c001      	RJMP __DIVF214
                 __DIVF213:
000666 9488      	CLC
                 __DIVF214:
000667 1f55      	ROL  R21
000668 1f22      	ROL  R18
000669 1f33      	ROL  R19
00066a 1c11      	ROL  R1
00066b 1faa      	ROL  R26
00066c 1fbb      	ROL  R27
00066d 1f88      	ROL  R24
00066e 1f44      	ROL  R20
00066f 959a      	DEC  R25
000670 f751      	BRNE __DIVF212
000671 01f9      	MOVW R30,R18
000672 2d61      	MOV  R22,R1
000673 914f      	POP  R20
000674 913f      	POP  R19
000675 912f      	POP  R18
000676 911f      	POP  R17
000677 2366      	TST  R22
000678 f032      	BRMI __DIVF215
000679 0f55      	LSL  R21
00067a 1fee      	ROL  R30
00067b 1fff      	ROL  R31
00067c 1f66      	ROL  R22
00067d 957a      	DEC  R23
00067e f243      	BRVS __DIVF217
                 __DIVF215:
00067f de7f      	RCALL __ROUND_REPACK
000680 915f      	POP  R21
000681 9508      	RET
                 
                 __CMPF12:
000682 2399      	TST  R25
000683 f09a      	BRMI __CMPF120
000684 2377      	TST  R23
000685 f042      	BRMI __CMPF121
000686 1797      	CP   R25,R23
000687 f048      	BRLO __CMPF122
000688 f429      	BRNE __CMPF121
000689 17ae      	CP   R26,R30
00068a 07bf      	CPC  R27,R31
00068b 0786      	CPC  R24,R22
00068c f020      	BRLO __CMPF122
00068d f031      	BREQ __CMPF123
                 __CMPF121:
00068e 9498      	CLZ
00068f 9488      	CLC
000690 9508      	RET
                 __CMPF122:
000691 9498      	CLZ
000692 9408      	SEC
000693 9508      	RET
                 __CMPF123:
000694 9418      	SEZ
000695 9488      	CLC
000696 9508      	RET
                 __CMPF120:
000697 2377      	TST  R23
000698 f7c2      	BRPL __CMPF122
000699 1797      	CP   R25,R23
00069a f398      	BRLO __CMPF121
00069b f7a9      	BRNE __CMPF122
00069c 17ea      	CP   R30,R26
00069d 07fb      	CPC  R31,R27
00069e 0768      	CPC  R22,R24
00069f f388      	BRLO __CMPF122
0006a0 f399      	BREQ __CMPF123
0006a1 cfec      	RJMP __CMPF121
                 
                 __ADDD12:
0006a2 0fea      	ADD  R30,R26
0006a3 1ffb      	ADC  R31,R27
0006a4 1f68      	ADC  R22,R24
0006a5 1f79      	ADC  R23,R25
0006a6 9508      	RET
                 
                 __ANEGD1:
0006a7 95f0      	COM  R31
0006a8 9560      	COM  R22
0006a9 9570      	COM  R23
0006aa 95e1      	NEG  R30
0006ab 4fff      	SBCI R31,-1
0006ac 4f6f      	SBCI R22,-1
0006ad 4f7f      	SBCI R23,-1
0006ae 9508      	RET
                 
                 __LSRD1:
0006af 9576      	LSR  R23
0006b0 9567      	ROR  R22
0006b1 95f7      	ROR  R31
0006b2 95e7      	ROR  R30
0006b3 9508      	RET
                 
                 __CWD1:
0006b4 2f6f      	MOV  R22,R31
0006b5 0f66      	ADD  R22,R22
0006b6 0b66      	SBC  R22,R22
0006b7 2f76      	MOV  R23,R22
0006b8 9508      	RET
                 
                 __LTD12U:
0006b9 17ae      	CP   R26,R30
0006ba 07bf      	CPC  R27,R31
0006bb 0786      	CPC  R24,R22
0006bc 0797      	CPC  R25,R23
0006bd e0e1      	LDI  R30,1
0006be f008      	BRLO __LTD12UT
0006bf 27ee      	CLR  R30
                 __LTD12UT:
0006c0 9508      	RET
                 
                 __GTD12U:
0006c1 17ea      	CP   R30,R26
0006c2 07fb      	CPC  R31,R27
0006c3 0768      	CPC  R22,R24
0006c4 0779      	CPC  R23,R25
0006c5 e0e1      	LDI  R30,1
0006c6 f008      	BRLO __GTD12UT
0006c7 27ee      	CLR  R30
                 __GTD12UT:
0006c8 9508      	RET
                 
                 __LNEGD1:
0006c9 2bef      	OR   R30,R31
0006ca 2be6      	OR   R30,R22
0006cb 2be7      	OR   R30,R23
0006cc e0e1      	LDI  R30,1
0006cd f009      	BREQ __LNEGD1F
0006ce e0e0      	LDI  R30,0
                 __LNEGD1F:
0006cf 9508      	RET
                 
                 __MULD12U:
0006d0 9f7a      	MUL  R23,R26
0006d1 2d70      	MOV  R23,R0
0006d2 9f6b      	MUL  R22,R27
0006d3 0d70      	ADD  R23,R0
0006d4 9ff8      	MUL  R31,R24
0006d5 0d70      	ADD  R23,R0
0006d6 9fe9      	MUL  R30,R25
0006d7 0d70      	ADD  R23,R0
0006d8 9f6a      	MUL  R22,R26
0006d9 2d60      	MOV  R22,R0
0006da 0d71      	ADD  R23,R1
0006db 9ffb      	MUL  R31,R27
0006dc 0d60      	ADD  R22,R0
0006dd 1d71      	ADC  R23,R1
0006de 9fe8      	MUL  R30,R24
0006df 0d60      	ADD  R22,R0
0006e0 1d71      	ADC  R23,R1
0006e1 2788      	CLR  R24
0006e2 9ffa      	MUL  R31,R26
0006e3 2df0      	MOV  R31,R0
0006e4 0d61      	ADD  R22,R1
0006e5 1f78      	ADC  R23,R24
0006e6 9feb      	MUL  R30,R27
0006e7 0df0      	ADD  R31,R0
0006e8 1d61      	ADC  R22,R1
0006e9 1f78      	ADC  R23,R24
0006ea 9fea      	MUL  R30,R26
0006eb 2de0      	MOV  R30,R0
0006ec 0df1      	ADD  R31,R1
0006ed 1f68      	ADC  R22,R24
0006ee 1f78      	ADC  R23,R24
0006ef 9508      	RET
                 
                 __GETD1P_INC:
0006f0 91ed      	LD   R30,X+
0006f1 91fd      	LD   R31,X+
0006f2 916d      	LD   R22,X+
0006f3 917d      	LD   R23,X+
0006f4 9508      	RET
                 
                 __PUTDP1_DEC:
0006f5 937e      	ST   -X,R23
0006f6 936e      	ST   -X,R22
0006f7 93fe      	ST   -X,R31
0006f8 93ee      	ST   -X,R30
0006f9 9508      	RET
                 
                 __GETD1S0:
0006fa 81e8      	LD   R30,Y
0006fb 81f9      	LDD  R31,Y+1
0006fc 816a      	LDD  R22,Y+2
0006fd 817b      	LDD  R23,Y+3
0006fe 9508      	RET
                 
                 __GETD2S0:
0006ff 81a8      	LD   R26,Y
000700 81b9      	LDD  R27,Y+1
000701 818a      	LDD  R24,Y+2
000702 819b      	LDD  R25,Y+3
000703 9508      	RET
                 
                 __PUTD1S0:
000704 83e8      	ST   Y,R30
000705 83f9      	STD  Y+1,R31
000706 836a      	STD  Y+2,R22
000707 837b      	STD  Y+3,R23
000708 9508      	RET
                 
                 __PUTPARD1:
000709 937a      	ST   -Y,R23
00070a 936a      	ST   -Y,R22
00070b 93fa      	ST   -Y,R31
00070c 93ea      	ST   -Y,R30
00070d 9508      	RET
                 
                 __PUTPARD2:
00070e 939a      	ST   -Y,R25
00070f 938a      	ST   -Y,R24
000710 93ba      	ST   -Y,R27
000711 93aa      	ST   -Y,R26
000712 9508      	RET
                 
                 __SWAPD12:
000713 2e18      	MOV  R1,R24
000714 2f86      	MOV  R24,R22
000715 2d61      	MOV  R22,R1
000716 2e19      	MOV  R1,R25
000717 2f97      	MOV  R25,R23
000718 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000719 2e1b      	MOV  R1,R27
00071a 2fbf      	MOV  R27,R31
00071b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00071c 2e1a      	MOV  R1,R26
00071d 2fae      	MOV  R26,R30
00071e 2de1      	MOV  R30,R1
00071f 9508      	RET
                 
                 __EEPROMRDD:
000720 9612      	ADIW R26,2
000721 d002      	RCALL __EEPROMRDW
000722 01bf      	MOVW R22,R30
000723 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
000724 9611      	ADIW R26,1
000725 d002      	RCALL __EEPROMRDB
000726 2ffe      	MOV  R31,R30
000727 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000728 99e1      	SBIC EECR,EEWE
000729 cffe      	RJMP __EEPROMRDB
00072a 93ff      	PUSH R31
00072b b7ff      	IN   R31,SREG
00072c 94f8      	CLI
00072d bbae      	OUT  EEARL,R26
00072e bbbf      	OUT  EEARH,R27
00072f 9ae0      	SBI  EECR,EERE
000730 b3ed      	IN   R30,EEDR
000731 bfff      	OUT  SREG,R31
000732 91ff      	POP  R31
000733 9508      	RET
                 
                 __EEPROMWRD:
000734 d007      	RCALL __EEPROMWRW
000735 9612      	ADIW R26,2
000736 010f      	MOVW R0,R30
000737 01fb      	MOVW R30,R22
000738 d003      	RCALL __EEPROMWRW
000739 01f0      	MOVW R30,R0
00073a 9712      	SBIW R26,2
00073b 9508      	RET
                 
                 __EEPROMWRW:
00073c d007      	RCALL __EEPROMWRB
00073d 9611      	ADIW R26,1
00073e 93ef      	PUSH R30
00073f 2fef      	MOV  R30,R31
000740 d003      	RCALL __EEPROMWRB
000741 91ef      	POP  R30
000742 9711      	SBIW R26,1
000743 9508      	RET
                 
                 __EEPROMWRB:
000744 9be1      	SBIS EECR,EEWE
000745 c002      	RJMP __EEPROMWRB1
000746 95a8      	WDR
000747 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000748 b79f      	IN   R25,SREG
000749 94f8      	CLI
00074a bbae      	OUT  EEARL,R26
00074b bbbf      	OUT  EEARH,R27
00074c 9ae0      	SBI  EECR,EERE
00074d b38d      	IN   R24,EEDR
00074e 17e8      	CP   R30,R24
00074f f019      	BREQ __EEPROMWRB0
000750 bbed      	OUT  EEDR,R30
000751 9ae2      	SBI  EECR,EEMWE
000752 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000753 bf9f      	OUT  SREG,R25
000754 9508      	RET
                 
                 __CPD10:
000755 9730      	SBIW R30,0
000756 4060      	SBCI R22,0
000757 4070      	SBCI R23,0
000758 9508      	RET
                 
                 __SAVELOCR2:
000759 931a      	ST   -Y,R17
00075a 930a      	ST   -Y,R16
00075b 9508      	RET
                 
                 __LOADLOCR2:
00075c 8119      	LDD  R17,Y+1
00075d 8108      	LD   R16,Y
00075e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  45 r1 :  40 r2 :   3 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  15 r17:  28 r18:  12 r19:  12 r20:  22 r21:  63 r22: 119 r23: 109 
r24:  85 r25:  70 r26: 156 r27:  78 r28:  11 r29:   1 r30: 376 r31: 109 
x  :  19 y  : 188 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  27 add   :  17 
adiw  :  15 and   :   6 andi  :  12 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  32 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   2 brmi  :   9 brne  :  27 brpl  :   8 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 cbi   :  14 
cbr   :   1 clc   :   3 clh   :   0 cli   :   7 cln   :   0 clr   :  34 
cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :   8 cp    :   9 
cpc   :  21 cpi   :  28 cpse  :   0 dec   :  11 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  21 
inc   :   2 ld    :  51 ldd   :  61 ldi   : 206 lds   :  28 lpm   :  12 
lsl   :  12 lsr   :   4 mov   :  64 movw  :  33 mul   :  19 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   4 ori   :  11 out   :  71 
pop   :  32 push  :  32 rcall : 278 ret   :  92 reti  :   2 rjmp  :  84 
rol   :  24 ror   :  18 sbc   :   7 sbci  :  14 sbi   :  20 sbic  :   2 
sbis  :   3 sbiw  :  19 sbr   :   2 sbrc  :   1 sbrs  :   2 sec   :   5 
seh   :   0 sei   :   5 sen   :   0 ser   :   8 ses   :   0 set   :   3 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  63 std   :  32 
sts   :  44 sub   :   4 subi  :  14 swap  :   2 tst   :  19 wdr   :   2 

Instructions used: 79 out of 114 (69.3%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ebe   3700     74   3774    8192  46.1%
[.dseg] 0x000060 0x000171      0     17     17    1024   1.7%
[.eseg] 0x000000 0x000008      0      8      8     512   1.6%

Assembly complete, 0 errors, 3 warnings
