;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22.07.2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// Standard Input/Output functions
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include <twi.h>
;
;// Declare your global variables here
;unsigned int T1 = 0, T2 =0, t1=0, t2=0;
;bit f=0;
;char *c= "C=";

	.DSEG
_0x3:
	.BYTE 0x3
;char *r= "ESR=";
_0x4:
	.BYTE 0x5
;unsigned int RS = 0;
; unsigned int CP = 0;
;char *LCD_buff= "0000000000000000";
_0x6:
	.BYTE 0x11
;char *a= "0000";
_0x8:
	.BYTE 0x5
;const char *b="<TESTING>";
;
;void LCDcom(unsigned char addr, unsigned char com) //выполняет пол команды отправляет старший полубайт
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D     com |= 0x08;                // Р3 в единицу, дабы горела подсветка
;PCODE: $0000000F VOL: 0
;	addr -> Y+1
;	com -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002E     twi_master_trans(addr,&com,1,0,0);    // Вывод данных
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002F     com |= 0x04;                // Е в единицу
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0030     twi_master_trans(addr,&com,1,0,0);    // Вывод данных
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0031     com &= 0xFB;                // Е в ноль
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032     twi_master_trans(addr,&com,1,0,0);    // Вывод данных
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0033 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;void LCDinit(unsigned char addr)
; 0000 0035 {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0036     delay_ms(30);        // Пауза после подачи питания
;PCODE: $0000003C VOL: 0
;	addr -> Y+0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037     LCDcom(addr,0x30);        // Переход в 4-х битный режим
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0038     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000044 VOL: 0
; 0000 0039     LCDcom(addr,0x30);        // Переход в 4-х битный режим
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003A     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000049 VOL: 0
; 0000 003B     LCDcom(addr,0x30);        // Переход в 4-х битный режим
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003C     delay_us(40);        // Задержка для выполнения команды
;PCODE: $0000004E VOL: 0
; 0000 003D     LCDcom(addr,0x20);        // Переход в 4-х битный режим
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003E     delay_us(40);        // Задержка для выполнения команды
;PCODE: $00000053 VOL: 0
; 0000 003F     LCDcom(addr,0x20);        // Установка параметров
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0040     LCDcom(addr,0x80);        // Установка параметров
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0041     LCDcom(addr,0x00);        // Выключаем дисплей
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0042     LCDcom(addr,0x80);        // Выключаем дисплей
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0043     LCDcom(addr,0x00);        // Очищаем дисплей
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0044     LCDcom(addr,0x10);        // Очищаем дисплей
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0045     LCDcom(addr,0x00);        // Устанавливаем режим ввода данных
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0046     LCDcom(addr,0x60);        // Устанавливаем режим ввода данных
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0047     LCDcom(addr,0x00);        // Включаем дисплей с выбранным курсором
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0048     LCDcom(addr,0xC0);        // Включаем дисплей с выбранным курсором
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0049 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;void char_out(unsigned char addr, unsigned char data)
; 0000 004C {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 004D     unsigned char data_h = ((data & 0xF0) + 0x09);
; 0000 004E     unsigned char data_l = ((data << 4) + 0x09);
; 0000 004F 
; 0000 0050     twi_master_trans(addr, &data_h,1,0,0); // Передача старших 4 бит
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;	addr -> Y+3
;	data -> Y+2
;	data_h -> R17
;	data_l -> R16
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0051     data_h |= 0x04;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0052     twi_master_trans(addr, &data_h,1,0,0); // Передача старших 4 бит
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0053 	data_h &= 0xF9;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0054 	twi_master_trans(addr, &data_h,1,0,0); // Передача старших 4 бит
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0055 
; 0000 0056 	twi_master_trans(addr, &data_l,1,0,0); // Передача младших 4 бит
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0057 	data_l |= 0x04;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0058 	twi_master_trans(addr, &data_l,1,0,0); // Передача младших 4 бит
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0059 	data_l &= 0xF9;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 005A 	twi_master_trans(addr, &data_l,1,0,0); // Передача младших 4 бит
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 005B }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;void str_out(unsigned char addr, char *str, char a)
; 0000 005E {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 005F //  LCDcom(addr,0x00);		// Очищаем дисплей
; 0000 0060 //	LCDcom(addr,0x10);
; 0000 0061     delay_ms(10);
;PCODE: $000000E1 VOL: 0
;	addr -> Y+3
;	*str -> Y+1
;	a -> Y+0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0062     if (a==1)
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0063     {
; 0000 0064       LCDcom(0x27,0xC0);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0065       LCDcom(0x27,0x00);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0066     }
; 0000 0067     else
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0068     {
; 0000 0069         LCDcom(0x27,0x00);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 006A         LCDcom(0x27,0x02);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 006B     }
;PCODE: $000000FA VOL: 0
; 0000 006C 
; 0000 006D 	while((*str) != '\0')
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 006E 	{
; 0000 006F 		char_out(addr,*str);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0070 		str++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0071 	}
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0072 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0076 {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0077  t1=TCNT1;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0078  TCNT1H=0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0079  TCNT1L=0;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 007A  f=1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 007B 
; 0000 007C 
; 0000 007D }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0081 {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0082 t2=TCNT1;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0083  printf("time1 %u ,%u  \n", T1,t1);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0084 
; 0000 0085 printf("time2 %u ,%u  \n", T2,t2);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0086 
; 0000 0087         CP=(T2*65536+t2)*0.005;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0088       itoa(CP, a);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0089       strcpy(LCD_buff, c);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 008A       strcat(LCD_buff, a);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 008B       strcat(LCD_buff, " uF");
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 008C       LCDcom(0x27,0x00);		// Очищаем дисплей
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 008D       LCDcom(0x27,0x10);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 008E       str_out(0x27, LCD_buff,0);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 008F       RS=1.5/0.005 - (T1*65536+t1)/CP;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0090       itoa(RS, a);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0091       strcpy(LCD_buff, r);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0092       strcat(LCD_buff, a);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0093       strcat(LCD_buff, " Ohm");
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0094       delay_ms(1000);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0095       str_out(0x27, LCD_buff,1);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0096 }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0

	.DSEG
_0x10:
	.BYTE 0x9
;
;
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 009C {

	.CSEG
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 009D TCNT1H=0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 009E TCNT1L=0;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 009F  T1 = 0;
;PCODE: $0000019A VOL: 0
; 0000 00A0   T2 =0;
;PCODE: $0000019B VOL: 0
; 0000 00A1    t1=0;
;PCODE: $0000019C VOL: 0
; 0000 00A2    t2=0;
;PCODE: $0000019D VOL: 0
; 0000 00A3 
; 0000 00A4 
; 0000 00A5 putchar('3');
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00A6 }
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00A9 {
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00AA   if (f==0)
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00AB   {
; 0000 00AC   T1++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00AD   }
; 0000 00AE   else
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00AF   {
; 0000 00B0    T2++;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00B1   }
;PCODE: $000001B0 VOL: 0
; 0000 00B2 
; 0000 00B3 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;
;void main(void)
; 0000 00B6 {
;PCODE: $000001B4 VOL: 0
; 0000 00B7 // Declare your local variables here
; 0000 00B8 // Input/Output Ports initialization
; 0000 00B9 // Port B initialization
; 0000 00BA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00BB DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00BC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BD PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00BE 
; 0000 00BF // Port C initialization
; 0000 00C0 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C1 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00C2 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C3 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00C4 
; 0000 00C5 // Port D initialization
; 0000 00C6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C7 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00C8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C9 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00CA 
; 0000 00CB 
; 0000 00CC 
; 0000 00CD // Timer/Counter 1 initialization ОПИСАНИЕ НЕВЕРНОЕ!!!! НАСТРОЙКИ ИЗМЕНЕНЫ
; 0000 00CE // Clock source: System Clock
; 0000 00CF // Clock value: 2000,000 kHz
; 0000 00D0 // Mode: Normal top=0xFFFF
; 0000 00D1 // OC1A output: Disconnected
; 0000 00D2 // OC1B output: Disconnected
; 0000 00D3 // Noise Canceler: Off
; 0000 00D4 // Input Capture on Falling Edge
; 0000 00D5 // Timer Period: 32,768 ms
; 0000 00D6 // Timer1 Overflow Interrupt: Off
; 0000 00D7 // Input Capture Interrupt: Off
; 0000 00D8 // Compare A Match Interrupt: Off
; 0000 00D9 // Compare B Match Interrupt: Off
; 0000 00DA TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00DB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00DC TCNT1H=0x00;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00DD TCNT1L=0x32;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00DE ICR1H=0x00;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00DF ICR1L=0x00;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00E0 OCR1AH=0x00;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00E1 OCR1AL=0x00;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00E2 OCR1BH=0x00;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00E3 OCR1BL=0x00;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00E4 
; 0000 00E5 
; 0000 00E6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00E8 
; 0000 00E9 // External Interrupt(s) initialization
; 0000 00EA // INT0: On
; 0000 00EB // INT0 Mode: Rising Edge
; 0000 00EC // INT1: On
; 0000 00ED // INT1 Mode: Rising Edge
; 0000 00EE GICR|=(1<<INT1) | (1<<INT0);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00EF MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00F0 GIFR=(1<<INTF1) | (1<<INTF0);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00F1 
; 0000 00F2 // USART initialization
; 0000 00F3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F4 // USART Receiver: Off
; 0000 00F5 // USART Transmitter: On
; 0000 00F6 // USART Mode: Asynchronous
; 0000 00F7 // USART Baud Rate: 9600
; 0000 00F8 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00F9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00FA UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00FB UBRRH=0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00FC UBRRL=0x33;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00FD 
; 0000 00FE // Analog Comparator initialization
; 0000 00FF // Analog Comparator: On
; 0000 0100 // The Analog Comparator's positive input is
; 0000 0101 // connected to the AIN0 pin
; 0000 0102 // The Analog Comparator's negative input is
; 0000 0103 // connected to the AIN1 pin
; 0000 0104 // Interrupt on Rising Output Edge
; 0000 0105 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0106 ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0107 SFIOR=(0<<ACME);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0108 
; 0000 0109 // ADC initialization
; 0000 010A // ADC disabled
; 0000 010B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 010C 
; 0000 010D 
; 0000 010E // TWI initialization
; 0000 010F twi_master_init(100);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0110 
; 0000 0111 // Global enable interrupts
; 0000 0112 
; 0000 0113 
; 0000 0114         LCDinit(0x27);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0115       *strcpyf(LCD_buff, b);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0116       str_out(0x27, LCD_buff,0);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0117       delay_ms(1000);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0118       #asm("sei")
;PCODE: $00000200 VOL: 0
	sei
;PCODE: $00000201 VOL: 0
; 0000 0119       PORTC=0;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 011A while (1)
;PCODE: $00000204 VOL: 0
; 0000 011B       {
; 0000 011C        putchar('2');
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 011D        delay_ms(1000);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 011E 
; 0000 011F       }
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0120 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
